{
  "packageManager": "pnpm@10.13.1",
  "engines": {
    "node": ">=22",
    "pnpm": "10.13.1"
  },
  "name": "noxis-planner",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "pnpm run prebuild && tsx scripts/run-next.ts dev -p 3000",
    "profile": "pnpm run prebuild && cross-env REACT_PROFILER=1 tsx scripts/run-next.ts dev -p 3000 --profiling",
    "prebuild": "tsx scripts/regen-if-needed.ts",
    "regen-ui": "tsx scripts/generate-ui-index.ts",
    "build-gallery": "pnpm run build-gallery-usage",
    "build-gallery-usage": "node --import tsx --import ./scripts/register-loaders.mjs scripts/build-gallery-usage.ts",
    "regen-feature": "tsx scripts/generate-feature-index.ts",
    "generate-themes": "tsx scripts/generate-themes.ts",
    "generate-tokens": "tsx scripts/generate-tokens.ts",
    "build": "tsx scripts/run-next.ts build",
    "prebuild:analyze": "pnpm run prebuild && node --input-type=module -e \"import { mkdirSync, rmSync } from 'node:fs'; import { resolve } from 'node:path'; const fallback = 'docs/bundle-report'; const raw = (process.env.BUNDLE_ANALYZE_OUTPUT_DIR ?? '').trim(); const target = raw.length > 0 ? raw : fallback; const absolute = resolve(target); rmSync(absolute, { recursive: true, force: true }); mkdirSync(absolute, { recursive: true });\"",
    "build:analyze": "cross-env ANALYZE=true BUNDLE_ANALYZE_OUTPUT_DIR=docs/bundle-report tsx scripts/run-next.ts build",
    "postbuild:analyze": "node --input-type=module -e \"import { cpSync, existsSync, mkdirSync, rmSync } from 'node:fs'; import { resolve } from 'node:path'; const fallback = 'docs/bundle-report'; const raw = (process.env.BUNDLE_ANALYZE_OUTPUT_DIR ?? '').trim(); const target = raw.length > 0 ? raw : fallback; const absolute = resolve(target); const source = resolve('.next', 'analyze'); if (existsSync(source)) { rmSync(absolute, { recursive: true, force: true }); mkdirSync(absolute, { recursive: true }); cpSync(source, absolute, { recursive: true }); console.log(`Bundle analysis artifacts saved to ${target}`); } else { console.warn('Bundle analyzer output not found at', source); }\"",
    "analyze": "pnpm run build:analyze",
    "start": "tsx scripts/run-next.ts start -p 3000",
    "lint": "cross-env ESLINT_USE_FLAT_CONFIG=true pnpm exec eslint --cache --cache-location .eslintcache src",
    "lint:ci": "cross-env ESLINT_USE_FLAT_CONFIG=true pnpm exec eslint --cache --cache-location .eslintcache src --max-warnings=0",
    "typecheck": "cross-env TSX_COMPILE_CACHE=0 tsx scripts/typecheck.ts",
    "typecheck:ci": "pnpm run typecheck -- --pretty false",
    "test": "cross-env NODE_OPTIONS=--max-old-space-size=12288 VITEST_MAX_THREADS=1 vitest",
    "test:ci": "node --max-old-space-size=8192 ./node_modules/vitest/vitest.mjs run --reporter=default --reporter=junit --outputFile artifacts/unit/junit.xml --coverage --coverage.reporter=lcov --coverage.reporter=json-summary",
    "audit:ci": "pnpm audit --audit-level=high --json > audit-report.json || true; node scripts/audit-ci-report.mjs audit-report.json",
    "e2e:ci": "playwright test",
    "lint:design": "cross-env ESLINT_USE_FLAT_CONFIG=true pnpm exec eslint --cache --cache-location .eslintcache --no-warn-ignored \"{app,src}/**/*.{js,jsx,ts,tsx}\"",
    "design-lint": "pnpm run lint:design",
    "guard:artifacts": "tsx scripts/guard-artifacts.ts",
    "clean:artifacts": "tsx scripts/clean-artifacts.ts",
    "check": "concurrently \"pnpm test -- --run\" \"pnpm run lint\" \"pnpm run lint:design\" \"pnpm run typecheck\" \"pnpm run guard:artifacts\"",
    "format": "prettier --write .",
    "verify-prompts": "tsx scripts/verify-prompts.ts --verify",
    "check-prompts": "tsx scripts/verify-prompts.ts",
    "token-guard": "tsx scripts/token-guard.ts",
    "contrast-report": "tsx scripts/contrast-report.ts",
    "postinstall": "node scripts/postinstall.mjs",
    "prepare": "node scripts/prepare.mjs",
    "launch": "tsx scripts/launcher.ts",
    "deploy:pages": "tsx scripts/deploy-gh-pages.ts",
    "deploy": "pnpm run deploy:pages",
    "deploy:npm": "npm run deploy:pages",
    "report:summary": "node scripts/report-summary.mjs",
    "commit": "pnpm exec cz"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.2.3",
    "@sentry/nextjs": "^8.35.0",
    "clsx": "^2.1.1",
    "framer-motion": "12.23.22",
    "fuse.js": "^7.1.0",
    "geist": "^1.5.1",
    "lucide-react": "^0.544.0",
    "next": "15.5.4",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "styled-jsx": "^5.1.1",
    "tailwind-merge": "^3.3.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@commitlint/cli": "^20.1.0",
    "@commitlint/config-conventional": "^20.0.0",
    "@commitlint/cz-commitlint": "^20.1.0",
    "@next/bundle-analyzer": "^15.5.4",
    "@next/eslint-plugin-next": "^15.5.4",
    "@playwright/test": "^1.56.0",
    "@storybook/react": "^9.1.8",
    "@storybook/react-vite": "^9.1.6",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/cli-progress": "^3.11.6",
    "@types/node": "^24.5.2",
    "@types/postcss-import": "^14.0.3",
    "@types/react": "^19.1.15",
    "@types/react-dom": "^19.1.9",
    "@vitest/coverage-istanbul": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "autoprefixer": "^10.4.21",
    "cli-progress": "^3.12.0",
    "commitizen": "^4.3.1",
    "concurrently": "^9.2.1",
    "cross-env": "^10.1.0",
    "eslint": "9.37.0",
    "eslint-config-next": "15.5.4",
    "eslint-config-prettier": "^10.1.8",
    "fast-glob": "^3.3.3",
    "gh-pages": "6.3.0",
    "husky": "^9.1.7",
    "jest-axe": "^10.0.0",
    "jsdom": "^27.0.0",
    "lint-staged": "^16.2.3",
    "p-limit": "^7.1.1",
    "postcss": "^8.4.49",
    "postcss-import": "^16.1.1",
    "prettier": "^3.6.2",
    "style-dictionary": "^5.0.4",
    "tailwindcss": "3.4.16",
    "tsx": "^4.20.6",
    "typescript": "^5.9.2",
    "vitest": "^3.2.4"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx,json,css,md}": "prettier --write",
    "*.{js,jsx,ts,tsx}": "cross-env ESLINT_USE_FLAT_CONFIG=true pnpm exec eslint --fix"
  },
  "config": {
    "commitizen": {
      "path": "@commitlint/cz-commitlint"
    }
  }
}

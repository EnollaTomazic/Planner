{"version":3,"file":"static/chunks/2289.44643ee50c533dff.js","mappings":"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","sources":["webpack://_N_E/./src/components/prompts/ChatPromptsTab.tsx","webpack://_N_E/./src/components/prompts/PromptList.tsx","webpack://_N_E/./src/components/prompts/PromptsComposePanel.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\n\nimport { Card } from \"@/components/ui\";\nimport { PromptsComposePanel } from \"./PromptsComposePanel\";\nimport { PromptList } from \"./PromptList\";\nimport type { Persona, PromptWithTitle } from \"./types\";\nimport { LOCALE } from \"@/lib/utils\";\n\ninterface ChatPromptsTabProps {\n  title: string;\n  text: string;\n  onTitleChange: (value: string) => void;\n  onTextChange: (value: string) => void;\n  prompts: PromptWithTitle[];\n  query: string;\n  personas: Persona[];\n}\n\nexport function ChatPromptsTab({\n  title,\n  text,\n  onTitleChange,\n  onTextChange,\n  prompts,\n  query,\n  personas,\n}: ChatPromptsTabProps) {\n  const composeHeadingId = React.useId();\n  const personasHeadingId = React.useId();\n  const libraryHeadingId = React.useId();\n\n  return (\n    <div className=\"flex flex-col gap-[var(--space-6)]\">\n      <section\n        aria-labelledby={composeHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={composeHeadingId} className=\"type-title\">\n            Compose prompt\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Draft a ChatGPT request and save it for future reuse.\n          </p>\n        </div>\n        <PromptsComposePanel\n          title={title}\n          onTitleChange={onTitleChange}\n          text={text}\n          onTextChange={onTextChange}\n        />\n      </section>\n\n      <section\n        aria-labelledby={personasHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={personasHeadingId} className=\"type-title\">\n            Personas\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Keep tailored introductions to quickly set tone and context.\n          </p>\n        </div>\n        {personas.length > 0 ? (\n          <ul className=\"grid gap-[var(--space-3)] md:grid-cols-2\">\n            {personas.map((persona) => (\n              <li key={persona.id}>\n                <Card className=\"flex h-full flex-col gap-[var(--space-3)] p-[var(--space-4)]\">\n                  <header className=\"space-y-[var(--space-1)]\">\n                    <h4 className=\"font-semibold text-body\">{persona.name}</h4>\n                    {persona.description ? (\n                      <p className=\"text-ui text-muted-foreground\">\n                        {persona.description}\n                      </p>\n                    ) : null}\n                    <time\n                      dateTime={new Date(persona.createdAt).toISOString()}\n                      className=\"block text-label text-muted-foreground\"\n                    >\n                      Added {new Date(persona.createdAt).toLocaleString(LOCALE)}\n                    </time>\n                  </header>\n                  <p className=\"whitespace-pre-wrap rounded-[var(--radius-md)] bg-card/60 p-[var(--space-3)] text-ui\">\n                    {persona.prompt}\n                  </p>\n                </Card>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-ui text-muted-foreground\">\n            No personas yet. Start a collection to keep favorite tones handy.\n          </p>\n        )}\n      </section>\n\n      <section\n        aria-labelledby={libraryHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={libraryHeadingId} className=\"type-title\">\n            Reusable prompts\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Saved ChatGPT prompts appear here with newest first.\n          </p>\n        </div>\n        <PromptList prompts={prompts} query={query} />\n      </section>\n    </div>\n  );\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/components/ui\";\nimport { Badge } from \"@/components/ui/primitives/Badge\";\nimport { LOCALE } from \"@/lib/utils\";\nimport type { PromptWithTitle } from \"./types\";\n\nexport type PromptListProps = {\n  prompts: PromptWithTitle[];\n  query: string;\n};\n\nexport function PromptList({ prompts, query }: PromptListProps) {\n  const q = query.trim();\n  const formattedPrompts = React.useMemo(\n    () =>\n      prompts.map((p) => {\n        const createdAt = new Date(p.createdAt);\n        return {\n          ...p,\n          createdAtDateTime: createdAt.toISOString(),\n          createdAtLabel: createdAt.toLocaleString(LOCALE),\n        };\n      }),\n    [prompts],\n  );\n  return (\n    <ul className=\"mt-[var(--space-4)] space-y-[var(--space-3)]\">\n      {formattedPrompts.map((p) => (\n        <li key={p.id}>\n          <Card className=\"p-[var(--space-3)]\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">{p.title}</h3>\n              <time\n                dateTime={p.createdAtDateTime}\n                className=\"text-label text-muted-foreground\"\n              >\n                {p.createdAtLabel}\n              </time>\n            </header>\n            {p.text ? (\n              <p className=\"mt-[var(--space-1)] whitespace-pre-wrap text-ui\">{p.text}</p>\n            ) : null}\n          </Card>\n        </li>\n      ))}\n      {prompts.length === 0 ? (\n        <li className=\"text-muted-foreground flex items-center gap-[var(--space-1)]\">\n          {q ? (\n            <>\n              No prompts match\n              <Badge size=\"sm\" tone=\"neutral\">{q}</Badge>\n            </>\n          ) : (\n            \"No prompts saved yet\"\n          )}\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Input, Textarea, Label } from \"@/components/ui\";\nimport { Check as CheckIcon } from \"lucide-react\";\n\ninterface PromptsComposePanelProps {\n  title: string;\n  onTitleChange: (value: string) => void;\n  text: string;\n  onTextChange: (value: string) => void;\n}\n\nexport function PromptsComposePanel({\n  title,\n  onTitleChange,\n  text,\n  onTextChange,\n}: PromptsComposePanelProps) {\n  const titleId = React.useId();\n  const textId = React.useId();\n  return (\n    <div className=\"space-y-[var(--space-3)]\">\n      <div>\n        <Label htmlFor={titleId}>Title</Label>\n        <Input\n          id={titleId}\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => onTitleChange(e.target.value)}\n          aria-describedby={`${titleId}-help`}\n        >\n          <CheckIcon\n            aria-hidden=\"true\"\n            className=\"absolute right-[var(--space-2)] top-1/2 -translate-y-1/2\"\n          />\n        </Input>\n        <p\n          id={`${titleId}-help`}\n          className=\"mt-[var(--space-1)] text-label text-muted-foreground\"\n        >\n          Add a short title\n        </p>\n      </div>\n      <div>\n        <Label htmlFor={textId}>Prompt</Label>\n        <Textarea\n          id={textId}\n          placeholder=\"Write your prompt or snippet…\"\n          value={text}\n          onChange={(e) => onTextChange(e.target.value)}\n          resize=\"resize-y\"\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["ChatPromptsTab","title","text","onTitleChange","onTextChange","prompts","query","personas","composeHeadingId","React","personasHeadingId","libraryHeadingId","div","className","section","aria-labelledby","h3","id","p","PromptsComposePanel","length","ul","map","li","Card","header","h4","persona","name","description","time","dateTime","Date","createdAt","toISOString","toLocaleString","LOCALE","prompt","PromptList","q","trim","formattedPrompts","createdAtDateTime","createdAtLabel","Badge","size","tone","titleId","textId","Label","htmlFor","Input","placeholder","value","onChange","e","target","aria-describedby","CheckIcon","aria-hidden","Textarea","resize"],"sourceRoot":"","ignoreList":[]}
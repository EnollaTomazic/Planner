{"version":3,"file":"static/chunks/8899-6739346e627688fb.js","mappings":"oPAeA,IAAMA,EAAkBC,EAAAA,IAAU,CAAC,SAAa,EAC9CC,QAAS,CAAC,MAAM,+BAA0B,CAAGF,eAAe,CAC9D,GAEMG,EAAWF,EAAAA,IAAU,CAAC,SAAa,EACvCC,QAAS,CAAC,MAAM,gCAAmB,CAAGC,QAAQ,CAChD,GAIMC,EAAiB,CACrB,CAAEC,IAAK,OAAQC,MAAO,SAAU,EAChC,CAAED,IAAK,QAASC,MAAO,cAAe,EACtC,CAAED,IAAK,QAASC,MAAO,OAAQ,EAChC,CAIM,SAASC,IACd,GAAM,CACJC,QAASC,CAAW,CACpBC,MAAOC,CAAS,CAChBC,SAAUC,CAAY,CACtBC,SAAUC,CAAY,CACtBC,KAAMC,CAAc,CACrB,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAcA,GACZ,CACJV,QAASW,CAAY,CACrBT,MAAOU,CAAU,CACjBR,SAAUS,CAAa,CACvBP,SAAUQ,CAAa,CACvBN,KAAMO,CAAe,CACtB,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,GACb,CAACC,EAAS,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACxB,CAACC,EAAOC,EAAS,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,GAE5B,CAACC,EAAWC,EAAa,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CA5B9B,iBA8BpB,QAGIC,EAAchC,EAAAA,MAAY,CAAsB,MAChDiC,EAAejC,EAAAA,MAAY,CAAsB,MACjD,CAACkC,EAAaC,EAAe,CAAGnC,EAAAA,QAAc,EAAC,GAC/C,CAACoC,EAAcC,EAAgB,CAAGrC,EAAAA,QAAc,EAAC,GAEjDsC,EAAWtC,EAAAA,OAAa,CAA+B,IACpDG,EAAeoC,GAAG,CAA6B,IACpD,GAAiB,QAAQ,CAArBC,EAAKpC,GAAG,CACV,MAAO,CACL,GAAGoC,CAAI,CACPC,MAAOjC,EAAYkC,MAAM,CAAG,EAAIlC,EAAYkC,MAAM,MAAGC,CACvD,EAEF,GAAIH,SAAsB,GAAjBpC,GAAG,CACV,MAAO,CACL,GAAGoC,CAAI,CACPC,MAAOvB,EAAawB,MAAM,CAAG,EAAIxB,EAAawB,MAAM,MAAGC,CACzD,EAEF,IAAMC,EAAWlB,EAAMmB,IAAI,GAAGH,MAAM,CAAG,EACvC,MAAO,CACL,GAAGF,CAAI,CACPC,MAAOG,EAAW,OAAID,CACxB,CACF,GACC,CAACnC,EAAYkC,MAAM,CAAExB,EAAawB,MAAM,CAAEhB,EAAM,EAE7CoB,EAAc9C,EAAAA,OAAa,CAAC,IAChC,QAA0B,CAAtB6B,EAA6BnB,EACf,SAAS,CAAvBmB,EAA8BV,EAC3B,GACN,CAACU,EAAWnB,EAAWS,EAAW,EAE/B4B,EAAoB/C,EAAAA,WAAiB,CACzC,IACE,GAAI6B,WAAsB,YACxBjB,EAAaoC,GAGG,SAAS,CAAvBnB,GACFT,EAAc4B,EAElB,EACA,CAACnB,EAAWjB,EAAcQ,EAAc,EAGpC6B,EAAajD,EAAAA,WAAiB,CAAC,SAEjCgC,EAIAC,EALF,GAAkB,SAAdJ,EAAsB,QACxBG,EAAAA,EAAYkB,OAAAA,GAAZlB,EAAAA,IAAAA,CAAAA,GACA,CADAA,KAEF,CACkB,SAAS,CAAvBH,WACFI,EAAAA,EAAaiB,OAAAA,GAAbjB,EAAAA,IAAAA,CAAAA,EAAAA,CAEJ,CAFIA,CAED,CAACJ,EAAU,EAERsB,EAAenD,EAAAA,OAAa,CAAC,IACjC,QAA0B,CAAtB6B,EACK,CAACK,EAEQ,SAAS,CAAvBL,GACK,CAACO,EAGT,CAACP,EAAWK,EAAaE,EAAa,EAEnCgB,EAAcpD,EAAAA,OAAa,CAAC,IAChC,QAA0B,CAAtB6B,EAA6BrB,EAAYkC,MAAM,CACjC,SAAS,CAAvBb,EAA8BX,EAAawB,MAAM,GAC9ChB,EAAMmB,IAAI,GAAGH,MAAM,EAAG,EAC5B,CAACb,CAD+B,CACpBrB,EAAYkC,CADY,KACN,CAAExB,EAAawB,MAAM,CAAEhB,EAAM,EAE9D,MACE,iCACE,UAAC2B,EAAAA,EAASA,CAAAA,CAACC,GAAG,SAASC,UAAU,+BAC/B,UAACC,EAAAA,CAAaA,CAAAA,CACZC,GAAG,iBACHC,MAAON,EACP3C,MAAOqC,EACPa,cAAeZ,EACfa,OAAQX,EACRY,SAAUV,MAId,UAACE,EAAAA,EAASA,CAAAA,CACRC,GAAG,UACHC,UAAU,+CACVO,kBAAgB,0BAEhB,WAACC,EAAAA,IAAIA,CAAAA,CAACf,MAAOnB,EAAWmC,cAAelC,EAAcmC,OAAO,yBAC1D,UAACC,EAAAA,OAAOA,CAAAA,CACNC,MAAO7B,EACP8B,UAAU,oBACVC,QAAQ,MACRC,YAAY,MAGd,UAACC,EAAAA,QAAQA,CAAAA,CAACvB,MAAM,OAAOO,UAAU,+BAC/B,UAACiB,EAAAA,CACCjE,QAASO,EACTL,MAAOC,EACPc,SAAUA,EACViD,WAAYzD,EACZ0D,QAAS1C,EACT2C,gBAAiBxC,MAIrB,UAACoC,EAAAA,QAAQA,CAAAA,CAACvB,MAAM,QAAQO,UAAU,+BAChC,UAACvD,EAAAA,QAAc,EAAC4E,SAAU,UAACC,EAAAA,UAAY,sCACrC,UAACC,EAAAA,CACCvE,QAASc,EACTZ,MAAOU,EACPsD,WAAYnD,EACZoD,QAASzC,EACT0C,gBAAiBtC,QAKvB,UAACkC,EAAAA,QAAQA,CAAAA,CAACvB,MAAM,QAAQO,UAAU,+BAChC,UAACvD,EAAAA,QAAc,EAAC4E,SAAU,UAACC,EAAAA,UAAY,8BACrC,UAAC3E,EAAAA,CAAS8C,MAAOtB,EAAOqD,SAAUpD,eAOhD,CAWA,SAAS6C,EAAa,CAOF,KAPE,CACpBjE,SAAO,OACPE,CAAK,UACLe,CAAQ,YACRiD,CAAU,SACVC,CAAO,iBACPC,CAAe,CACG,CAPE,EAQd,CAACK,EAAOC,EAAS,CAAGjF,EAAAA,QAAc,CAAC,IACnC,CAACkF,EAAMC,EAAQ,CAAGnF,EAAAA,QAAc,CAAC,IAEjCoF,EAAUpF,EAAAA,OAAa,CAAC,KACrBqF,EAAQL,EAAMnC,IAAI,IAAMqC,EAAKrC,IAAI,IACvC,CAACqC,EAAMF,EAAM,EAEhBhF,EAAAA,SAAe,CAAC,KACd2E,EAAgBS,EAClB,EAAG,CAACA,EAAST,EAAgB,EAE7B3E,EAAAA,SAAe,CAAC,IACP,KACL2E,GAAgB,EAClB,EACC,CAACA,EAAgB,EAEpB,IAAM1B,EAAajD,EAAAA,WAAiB,CAAC,KAC/ByE,EAAWO,EAAOE,KACpBD,EAD2B,IAE3BE,EAAQ,IAEZ,EAAG,CAACV,EAAYS,EAAMF,EAAM,EAW5B,OATAhF,EAAAA,SAAe,CAAC,KACd0E,EAAQxB,OAAO,CAAGD,EACX,KACDyB,EAAQxB,OAAO,GAAKD,IACtByB,EAAQxB,MAD0B,CACnB,CAAG,KAEtB,GACC,CAACD,EAAYyB,EAAQ,EAGtB,UAACY,EAAAA,CAAcA,CAAAA,CACbN,MAAOA,EACPE,KAAMA,EACNK,cAAeN,EACfO,aAAcL,EACd5E,QAASA,EACTE,MAAOA,EACPe,SAAUA,GAGhB,CAUA,SAASsD,EAAc,CAMF,KANE,SACrBvE,CAAO,OACPE,CAAK,YACLgE,CAAU,SACVC,CAAO,iBACPC,CAAe,CACI,CANE,EAOf,CAACK,EAAOC,EAAS,CAAGjF,EAAAA,QAAc,CAAC,IACnC,CAACkF,EAAMC,EAAQ,CAAGnF,EAAAA,QAAc,CAAC,IAEjCoF,EAAUpF,EAAAA,OAAa,CAAC,KACrBqF,EAAQL,EAAMnC,IAAI,IAAMqC,EAAKrC,IAAI,IACvC,CAACqC,EAAMF,EAAM,EAEhBhF,EAAAA,SAAe,CAAC,KACd2E,EAAgBS,EAClB,EAAG,CAACA,EAAST,EAAgB,EAE7B3E,EAAAA,SAAe,CAAC,IACP,KACL2E,GAAgB,EAClB,EACC,CAACA,EAAgB,EAEpB,IAAM1B,EAAajD,EAAAA,WAAiB,CAAC,KAC/ByE,EAAWO,EAAOE,KACpBD,EAAS,IACTE,EAAQ,IAEZ,EAAG,CAACV,EAAYS,EAAMF,EAAM,EAW5B,OATAhF,EAAAA,SAAe,CAAC,KACd0E,EAAQxB,OAAO,CAAGD,EACX,KACDyB,EAAQxB,OAAO,GAAKD,IACtByB,EAAQxB,MAD0B,CACnB,CAAG,KAEtB,GACC,CAACD,EAAYyB,EAAQ,EAGtB,UAAC3E,EAAAA,CACCiF,MAAOA,EACPE,KAAMA,EACNK,cAAeN,EACfO,aAAcL,EACd5E,QAASA,EACTE,MAAOA,GAGb,CAEA,SAASoE,EAAY,CAA2C,KAA3C,UAAEY,CAAQ,CAAiC,CAA3C,EACnB,MACE,UAACC,MAAAA,CACCC,KAAK,SACLC,YAAU,SACVrC,UAAU,kJAETkC,GAGP,0GC7SO,SAASH,EAAe,CAQT,KARS,CAC7BN,OAAK,MACLE,CAAI,eACJK,CAAa,cACbC,CAAY,SACZjF,CAAO,OACPE,CAAK,UACLe,CAAQ,CACY,CARS,EASvBqE,EAAmB7F,EAAAA,KAAW,GAC9B8F,EAAoB9F,EAAAA,KAAW,GAC/B+F,EAAmB/F,EAAAA,KAAW,GAEpC,MACE,WAAC0F,MAAAA,CAAInC,UAAU,+CACb,WAACyC,UAAAA,CACClC,kBAAiB+B,EACjBtC,UAAU,+CAEV,WAACmC,MAAAA,CAAInC,UAAU,qCACb,UAAC0C,KAAAA,CAAGxC,GAAIoC,EAAkBtC,UAAU,sBAAa,mBAGjD,UAAC2C,IAAAA,CAAE3C,UAAU,yCAAgC,6DAI/C,UAAC4C,EAAAA,CAAmBA,CAAAA,CAClBnB,MAAOA,EACPO,cAAeA,EACfL,KAAMA,EACNM,aAAcA,OAIlB,WAACQ,UAAAA,CACClC,kBAAiBgC,EACjBvC,UAAU,+CAEV,WAACmC,MAAAA,CAAInC,UAAU,qCACb,UAAC0C,KAAAA,CAAGxC,GAAIqC,EAAmBvC,UAAU,sBAAa,aAGlD,UAAC2C,IAAAA,CAAE3C,UAAU,yCAAgC,oEAI9C/B,EAASkB,MAAM,CAAG,EACjB,UAAC0D,KAAAA,CAAG7C,UAAU,oDACX/B,EAASe,GAAG,CAAC,GACZ,UAAC8D,KAAAA,UACC,WAACC,EAAAA,EAAIA,CAAAA,CAAC/C,UAAU,yEACd,WAACgD,SAAAA,CAAOhD,UAAU,qCAChB,UAACiD,KAAAA,CAAGjD,UAAU,mCAA2BkD,EAAQC,IAAI,GACpDD,EAAQE,WAAW,CAClB,UAACT,IAAAA,CAAE3C,UAAU,yCACVkD,EAAQE,WAAW,GAEpB,KACJ,WAACC,OAAAA,CACCC,SAAU,IAAIC,KAAKL,EAAQM,SAAS,EAAEC,WAAW,GACjDzD,UAAU,mDACX,SACQ,IAAIuD,KAAKL,EAAQM,SAAS,EAAEE,cAAc,CAACC,EAAAA,EAAMA,QAG5D,UAAChB,IAAAA,CAAE3C,UAAU,gGACVkD,EAAQU,MAAM,OAjBZV,EAAQhD,EAAE,KAwBvB,UAACyC,IAAAA,CAAE3C,UAAU,yCAAgC,yEAMjD,WAACyC,UAAAA,CACClC,kBAAiBiC,EACjBxC,UAAU,+CAEV,WAACmC,MAAAA,CAAInC,UAAU,qCACb,UAAC0C,KAAAA,CAAGxC,GAAIsC,EAAkBxC,UAAU,sBAAa,qBAGjD,UAAC2C,IAAAA,CAAE3C,UAAU,yCAAgC,4DAI/C,UAAC6D,EAAAA,CAAUA,CAAAA,CAAC7G,QAASA,EAASE,MAAOA,SAI7C,8DErFO,SAAS4G,EAAcrE,CAAc,EAC1C,GAAI,CAACsE,MAAMC,OAAO,CAACvE,GAAQ,OAAO,KAClC,IAAMwE,EAAmB,EAAE,CAC3B,IAAK,IAAMC,KAASzE,EAAO,CACzB,IAAMmE,EAASO,SApBVA,CAA2B,EAClC,GAAI,CAACC,CAJmB,UAAjB,OAAO3E,GAAsBA,OAItBA,GAJwC,CAACsE,MAAMC,OAAO,CAACvE,EAAAA,EAI/C,OAAO,KAC7B,IAAMS,EAAKT,EAAM,EAAK,CAAN,EACHA,EAAM,GAAD,CAAQ,CACpB+D,EAAY/D,EAAM,GAAD,MAAa,CACpC,GAAkB,UAAd,OAAOS,GACS,UAAhB,OAAOyB,GACc,UAArB,OAAO6B,GAA0B,CAACa,OAAOC,QAAQ,CAACd,GAF1B,OAAO,EAE+B,GAClE,IADyE,EAClD,CAAEtD,KAAIyB,iBAAM6B,CAAU,EACvC/B,EAAQhC,EAAM,GAAD,EAAS,CAI5B,MAHqB,UAAjB,OAAOgC,IACTmC,EAAOnC,KAAK,CAAGA,CAAAA,EAEVmC,CACT,EAMgCM,GACxBN,GAAQK,EAAOM,IAAI,CAACX,EAC1B,CACA,OAAOK,CACT,CAEA,IAAMO,EAA8B,EAAE,CAE/B,SAASC,EAAiBC,CAAkB,EACjD,GAAM,CAAC1H,EAAS2H,EAAW,CAAGnG,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAAWkG,EAAYF,EAAmB,CACxFI,OAAQd,CACV,GACM,CAAC5G,EAAOE,EAAS,CAAGX,EAAAA,QAAc,CAAC,IAEnCoI,EAAapI,EAAAA,OAAa,CAC9B,IAAMO,EAAQgC,GAAG,CAAC,QD/BF,CC+Be,QAAE,GAAG4E,CAAM,CAAEnC,MDhC9C,CCgCqDqD,CDhC1CrD,KAAK,EAAImC,EAAOnC,KAAK,CAACnC,CCgCqCwF,GDhCjC,GAAWlB,CAAP,CAAcnC,KAAK,CAACnC,IAAI,GAI1DyF,CAHDA,OAAY,GAACnB,EAAOjC,IAAI,EAAI,GAAC,CAChCqD,KAAK,CAAC,SACNC,IAAI,CAAEC,GAASA,EAAK5F,IAAI,KAFT,SAEcA,IAFd,EAEkB,GAChB,UC4B2D,IAC7E,CAACtC,EAAQ,EAGLmI,EAAuB1I,EAAAA,MAAY,CAA2C,MAC9E2I,EAAU3I,EAAAA,MAAY,CAA+B,MAErD,CAACa,EAAU+H,EAAY,CAAG5I,EAAAA,QAAc,CAAoBoI,GAE5DS,EAAa7I,EAAAA,WAAiB,CAAC,UAC/B,EAAsBkD,OAAO,EAAE,CACjCwF,EAAqBxF,OAAO,CAAG,gCAAiB,CAElD,GAAM,CAAEjD,QAAS6I,CAAU,CAAE,CAAG,MAAMJ,EAAqBxF,OAAO,CAClE,GAAIyF,EAAQzF,OAAO,CAEjB,CAFmB,MACnByF,EAAQzF,OAAO,CAAC6F,aAAa,CAACX,GACvBO,EAAQzF,OAAO,CAExB,IAAM8F,EAAW,IAAIF,EAA4BV,EAAY,CAC3Da,KAAM,CAAC,QAAS,OAAO,CACvBC,UAAW,EACb,GAEA,OADAP,EAAQzF,OAAO,CAAG8F,EACXA,CACT,EAAG,CAACZ,EAAW,EAwDf,OAtDApI,EAAAA,SAAe,CAAC,KACd,IAAMmJ,EAAU1I,EAAMoC,IAAI,GAC1B,GAAI,CAACsG,EAAS,YACZP,EAAYR,GAId,IAAIgB,GAAY,EAEhB,GAAI,CAACT,EAAQzF,OAAO,CAAE,CACpB,IAAMmG,EAAUF,EAAQG,WAAW,GACnCV,EACER,EAAWmB,MAAM,CAAC,GAEdpC,EAAOnC,KAAK,CAACsE,WAAW,GAAGE,QAAQ,CAACH,IACpClC,EAAOjC,IAAI,CAACoE,WAAW,GAAGE,QAAQ,CAACH,IAI3C,CAYA,MAFKI,CARa,UAChB,IAAMC,EAAO,MAAMb,IACnB,GAAIO,EAAW,OACf,IAAMO,EAAUD,EAAKE,MAAM,CAACT,GACxBC,GACJR,EAAYe,EAAQpH,GAAG,CAAC,GAASsH,EAAIrH,IAAI,GAC3C,IAIO,KACL4G,GAAY,CACd,CACF,EAAG,CAACP,EAAYpI,EAAO2H,EAAW,EAoB3B,SAAE7H,EAASE,iBAAOE,WAAUE,EAAUE,KAlBhCf,EAAAA,WAAiB,CAC5B,CAAC8J,EAAoBC,SAGI7E,EAFvB,IAAMA,EAAO6E,EAAUlH,IAAI,GACrBmC,EACJ8E,EAAWjH,IAAI,YAAMqC,EAAAA,EAAKqD,KAAK,CAAC,QAAQ,CAAC,IAApBrD,KAAAA,EAAAA,EAAwBrC,GAAxBqC,CAA4B,KAAM,WACzD,GAAI,CAACA,GAAQ,CAAC4E,EAAWjH,IAAI,GAAI,OAAO,EACxC,IAAMmH,EAAe,CACnBvG,GAAIwG,CAAAA,EAAAA,EAAAA,GAAAA,CAAGA,CAAC,WACRjF,OACAE,EACA6B,UAAWD,KAAKoD,GAAG,EACrB,EAEA,OADAhC,EAAW,GAAU,CAAC8B,KAASG,EAAK,EAC7B,EACT,EACA,CAACjC,EAAW,CAGoC,CACpD,mDC7HO,SAAStG,IACd,MAAOG,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAHa,mBAGsB,GAC9D,+FCKO,SAASqF,EAAW,CAAmC,KAAnC,SAAE7G,CAAO,OAAEE,CAAK,CAAmB,CAAnC,EACnB2J,EAAI3J,EAAMoC,IAAI,GACdwH,EAAmBrK,EAAAA,OAAa,CACpC,IACEO,EAAQgC,GAAG,CAAC,IACV,IAAMwE,EAAY,IAAID,KAAKZ,EAAEa,SAAS,EACtC,MAAO,CACL,GAAGb,CAAC,CACJoE,kBAAmBvD,EAAUC,WAAW,GACxCuD,eAAgBxD,EAAUE,cAAc,CAACC,EAAAA,EAAMA,CACjD,CACF,GACF,CAAC3G,EAAQ,EAEX,MACE,WAAC6F,KAAAA,CAAG7C,UAAU,yDACX8G,EAAiB9H,GAAG,CAAE2D,GACrB,UAACG,KAAAA,UACC,WAACC,EAAAA,EAAIA,CAAAA,CAAC/C,UAAU,+BACd,WAACgD,SAAAA,CAAOhD,UAAU,8CAChB,UAAC0C,KAAAA,CAAG1C,UAAU,yBAAiB2C,EAAElB,KAAK,GACtC,UAAC4B,OAAAA,CACCC,SAAUX,EAAEoE,iBAAiB,CAC7B/G,UAAU,4CAET2C,EAAEqE,cAAc,MAGpBrE,EAAEhB,IAAI,CACL,UAACgB,IAAAA,CAAE3C,UAAU,2DAAmD2C,EAAEhB,IAAI,GACpE,SAbCgB,EAAEzC,EAAE,GAiBK,IAAnBlD,EAAQmC,MAAM,CACb,UAAC2D,KAAAA,CAAG9C,UAAU,wEACX6G,EACC,iCAAE,mBAEA,UAACI,EAAAA,KAAKA,CAAAA,CAACC,KAAK,KAAKC,KAAK,mBAAWN,OAGnC,yBAGF,OAGV,mDCvDA,IAAMO,EAAgC,EAAE,CAEjC,SAASlJ,IACd,MAAOM,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CACvB6I,sBACAD,EAEJ,oFCPA,IAAME,EAAQ,CAAC,QAAS,QAAS,SAAU,WAAY,UAAU,CAW1D,SAASrH,EAAc,CAOT,KAPS,IAC5BC,EAAK,gBAAgB,OACrBC,CAAK,OACLjD,CAAK,eACLkD,CAAa,QACbC,CAAM,UACNC,CAAQ,CACW,CAPS,EAQtBiH,EAAa9K,EAAAA,WAAiB,CAClC,IAEE2D,EADkBlD,IAAUsK,EAAO,GAAKA,EAE1C,CADgBC,CAEhB,CAACrH,EAAelD,EAAM,EAGlBwK,EAAW,GAAM,OAAHxH,EAAG,WAEvB,MACE,UAACyH,EAAAA,EAAUA,CAAAA,CACTC,mBAAmB,mBACnB5E,OAAQ,IACN9C,EACA2H,QAAS,UACTC,QAAQ,EACRC,MACE,WAACC,OAAAA,CAAKhI,UAAU,OAAOqC,YAAU,mBAC9BlC,EAAM,WAGb,EACA8H,KAAM,CACJH,QAAQ,EACRX,KAAM,aACNe,aAAc,4BACdL,QACE,UAACG,OAAAA,CAAKhI,UAAU,UAAUE,GAAI,GAAM,OAAHA,EAAG,kBAAQ,8BAI9CgC,SACE,UAACC,MAAAA,CAAInC,UAAU,sEACZsH,EAAMtI,GAAG,CAAC,IACT,IAAMmJ,EAAajL,IAAUsK,EAE7B,MACE,UAACP,EAAAA,KAAKA,CAAAA,CAEJmB,WAAW,IACXC,SAAUF,EACVG,eAAcH,EACdI,QAAS,IAAMhB,EAAWC,YAEzBA,GANIA,EASX,KAGJnB,OAAQ,CACNnG,GAAIwH,EACJjI,MAAOvC,EACPuD,cAAeL,EACfoI,WAAY,IACZC,YAAa,kBACb,aAAc,iBACd3H,QAAS,MACT4H,OAAO,CACT,EACAC,QACE,UAACC,EAAAA,EAAMA,CAAAA,CAACC,KAAK,SAAS/H,QAAQ,UAAUyH,QAASlI,EAAQC,SAAUA,WAAU,QAIjF,GAGN,mDCxFO,SAAS5C,IACd,MAAO+G,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAHe,kBAA2B,mDCE5D,SAASzG,IACd,MAAOyG,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAACqE,mBAC1B,mFCKO,SAASlG,EAAoB,CAKT,KALS,OAClCnB,CAAK,CACLO,eAAa,CACbL,MAAI,cACJM,CAAY,CACa,CALS,EAM5B8G,EAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACxBC,EAAYD,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACvBE,EAAc,GAAiB,OAAdH,EAAW7I,EAAE,CAAC,SACrC,MACE,WAACiC,MAAAA,CAAInC,UAAU,qCACb,WAACmC,MAAAA,WACC,UAACgH,EAAAA,EAAKA,CAAAA,CAACC,QAASL,EAAW7I,EAAE,UAAE,UAC/B,UAACmJ,EAAAA,EAAKA,CAAAA,CACJnJ,GAAI6I,EAAW7I,EAAE,CACjBiD,KAAM4F,EAAW5F,IAAI,CACrBsF,YAAY,QACZhJ,MAAOgC,EACPD,SAAU,GAAOQ,EAAcsH,EAAEC,MAAM,CAAC9J,KAAK,EAC7C+J,mBAAkBN,WAElB,UAACO,EAAAA,CAASA,CAAAA,CACRC,cAAY,OACZ1J,UAAU,+DAGd,UAAC2C,IAAAA,CACCzC,GAAIgJ,EACJlJ,UAAU,gEACX,yBAIH,WAACmC,MAAAA,WACC,UAACgH,EAAAA,EAAKA,CAAAA,CAACC,QAASH,EAAU/I,EAAE,UAAE,WAC9B,UAACyJ,EAAAA,EAAQA,CAAAA,CACPzJ,GAAI+I,EAAU/I,EAAE,CAChBiD,KAAM8F,EAAU9F,IAAI,CACpBsF,YAAY,gCACZhJ,MAAOkC,EACPH,SAAU,GAAOS,EAAaqH,EAAEC,MAAM,CAAC9J,KAAK,EAC5CmK,OAAO,kBAKjB","sources":["webpack://_N_E/./src/components/prompts/PromptsPage.tsx","webpack://_N_E/./src/components/prompts/ChatPromptsTab.tsx","webpack://_N_E/./src/components/prompts/types.ts","webpack://_N_E/./src/components/prompts/usePromptLibrary.ts","webpack://_N_E/./src/components/prompts/useNotes.ts","webpack://_N_E/./src/components/prompts/PromptList.tsx","webpack://_N_E/./src/components/prompts/usePersonas.ts","webpack://_N_E/./src/components/prompts/PromptsHeader.tsx","webpack://_N_E/./src/components/prompts/useChatPrompts.ts","webpack://_N_E/./src/components/prompts/useCodexPrompts.ts","webpack://_N_E/./src/components/prompts/PromptsComposePanel.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\n\nimport { PageShell } from \"@/components/ui\";\nimport { Tabs, TabList, TabPanel, type TabListItem } from \"@/components/ui/primitives/Tabs\";\nimport { usePersistentState } from \"@/lib/db\";\nimport { ChatPromptsTab } from \"./ChatPromptsTab\";\nimport { PromptsHeader } from \"./PromptsHeader\";\nimport type { Persona, PromptWithTitle } from \"./types\";\nimport { useChatPrompts } from \"./useChatPrompts\";\nimport { useCodexPrompts } from \"./useCodexPrompts\";\nimport { useNotes } from \"./useNotes\";\nimport { usePersonas } from \"./usePersonas\";\n\nconst CodexPromptsTab = React.lazy(async () => ({\n  default: (await import(\"./CodexPromptsTab\")).CodexPromptsTab,\n}));\n\nconst NotesTab = React.lazy(async () => ({\n  default: (await import(\"./NotesTab\")).NotesTab,\n}));\n\nconst TAB_STORAGE_KEY = \"prompts.tab.v1\" as const;\n\nconst BASE_TAB_ITEMS = [\n  { key: \"chat\", label: \"ChatGPT\" },\n  { key: \"codex\", label: \"Codex review\" },\n  { key: \"notes\", label: \"Notes\" },\n] as const;\n\ntype PromptsTabKey = (typeof BASE_TAB_ITEMS)[number][\"key\"];\n\nexport function PromptsPage() {\n  const {\n    prompts: chatPrompts,\n    query: chatQuery,\n    setQuery: setChatQuery,\n    filtered: chatFiltered,\n    save: saveChatPrompt,\n  } = useChatPrompts();\n  const {\n    prompts: codexPrompts,\n    query: codexQuery,\n    setQuery: setCodexQuery,\n    filtered: codexFiltered,\n    save: saveCodexPrompt,\n  } = useCodexPrompts();\n  const [personas] = usePersonas();\n  const [notes, setNotes] = useNotes();\n\n  const [activeTab, setActiveTab] = usePersistentState<PromptsTabKey>(\n    TAB_STORAGE_KEY,\n    \"chat\",\n  );\n\n  const chatSaveRef = React.useRef<(() => void) | null>(null);\n  const codexSaveRef = React.useRef<(() => void) | null>(null);\n  const [chatCanSave, setChatCanSave] = React.useState(false);\n  const [codexCanSave, setCodexCanSave] = React.useState(false);\n\n  const tabItems = React.useMemo<TabListItem<PromptsTabKey>[]>(() => {\n    return BASE_TAB_ITEMS.map<TabListItem<PromptsTabKey>>((item) => {\n      if (item.key === \"chat\") {\n        return {\n          ...item,\n          badge: chatPrompts.length > 0 ? chatPrompts.length : undefined,\n        };\n      }\n      if (item.key === \"codex\") {\n        return {\n          ...item,\n          badge: codexPrompts.length > 0 ? codexPrompts.length : undefined,\n        };\n      }\n      const hasNotes = notes.trim().length > 0;\n      return {\n        ...item,\n        badge: hasNotes ? 1 : undefined,\n      };\n    });\n  }, [chatPrompts.length, codexPrompts.length, notes]);\n\n  const activeQuery = React.useMemo(() => {\n    if (activeTab === \"chat\") return chatQuery;\n    if (activeTab === \"codex\") return codexQuery;\n    return \"\";\n  }, [activeTab, chatQuery, codexQuery]);\n\n  const handleQueryChange = React.useCallback(\n    (value: string) => {\n      if (activeTab === \"chat\") {\n        setChatQuery(value);\n        return;\n      }\n      if (activeTab === \"codex\") {\n        setCodexQuery(value);\n      }\n    },\n    [activeTab, setChatQuery, setCodexQuery],\n  );\n\n  const handleSave = React.useCallback(() => {\n    if (activeTab === \"chat\") {\n      chatSaveRef.current?.();\n      return;\n    }\n    if (activeTab === \"codex\") {\n      codexSaveRef.current?.();\n    }\n  }, [activeTab]);\n\n  const saveDisabled = React.useMemo(() => {\n    if (activeTab === \"chat\") {\n      return !chatCanSave;\n    }\n    if (activeTab === \"codex\") {\n      return !codexCanSave;\n    }\n    return true;\n  }, [activeTab, chatCanSave, codexCanSave]);\n\n  const activeCount = React.useMemo(() => {\n    if (activeTab === \"chat\") return chatPrompts.length;\n    if (activeTab === \"codex\") return codexPrompts.length;\n    return notes.trim().length > 0 ? 1 : 0;\n  }, [activeTab, chatPrompts.length, codexPrompts.length, notes]);\n\n  return (\n    <>\n      <PageShell as=\"header\" className=\"py-[var(--space-6)]\">\n        <PromptsHeader\n          id=\"prompts-header\"\n          count={activeCount}\n          query={activeQuery}\n          onQueryChange={handleQueryChange}\n          onSave={handleSave}\n          disabled={saveDisabled}\n        />\n      </PageShell>\n\n      <PageShell\n        as=\"section\"\n        className=\"space-y-[var(--space-6)] py-[var(--space-6)]\"\n        aria-labelledby=\"prompts-header\"\n      >\n        <Tabs value={activeTab} onValueChange={setActiveTab} idBase=\"prompts-tabs\">\n          <TabList\n            items={tabItems}\n            ariaLabel=\"Prompt workspaces\"\n            variant=\"neo\"\n            showBaseline\n          />\n\n          <TabPanel value=\"chat\" className=\"pb-[var(--space-8)]\">\n            <ChatTabPanel\n              prompts={chatFiltered}\n              query={chatQuery}\n              personas={personas}\n              savePrompt={saveChatPrompt}\n              saveRef={chatSaveRef}\n              onCanSaveChange={setChatCanSave}\n            />\n          </TabPanel>\n\n          <TabPanel value=\"codex\" className=\"pb-[var(--space-8)]\">\n            <React.Suspense fallback={<TabFallback>Loading Codex checklist…</TabFallback>}>\n              <CodexTabPanel\n                prompts={codexFiltered}\n                query={codexQuery}\n                savePrompt={saveCodexPrompt}\n                saveRef={codexSaveRef}\n                onCanSaveChange={setCodexCanSave}\n              />\n            </React.Suspense>\n          </TabPanel>\n\n          <TabPanel value=\"notes\" className=\"pb-[var(--space-8)]\">\n            <React.Suspense fallback={<TabFallback>Preparing notes…</TabFallback>}>\n              <NotesTab value={notes} onChange={setNotes} />\n            </React.Suspense>\n          </TabPanel>\n        </Tabs>\n      </PageShell>\n    </>\n  );\n}\n\ninterface ChatTabPanelProps {\n  prompts: PromptWithTitle[];\n  query: string;\n  personas: Persona[];\n  savePrompt: (title: string, text: string) => boolean;\n  saveRef: React.MutableRefObject<(() => void) | null>;\n  onCanSaveChange: (canSave: boolean) => void;\n}\n\nfunction ChatTabPanel({\n  prompts,\n  query,\n  personas,\n  savePrompt,\n  saveRef,\n  onCanSaveChange,\n}: ChatTabPanelProps) {\n  const [title, setTitle] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n\n  const canSave = React.useMemo(() => {\n    return Boolean(title.trim() || text.trim());\n  }, [text, title]);\n\n  React.useEffect(() => {\n    onCanSaveChange(canSave);\n  }, [canSave, onCanSaveChange]);\n\n  React.useEffect(() => {\n    return () => {\n      onCanSaveChange(false);\n    };\n  }, [onCanSaveChange]);\n\n  const handleSave = React.useCallback(() => {\n    if (savePrompt(title, text)) {\n      setTitle(\"\");\n      setText(\"\");\n    }\n  }, [savePrompt, text, title]);\n\n  React.useEffect(() => {\n    saveRef.current = handleSave;\n    return () => {\n      if (saveRef.current === handleSave) {\n        saveRef.current = null;\n      }\n    };\n  }, [handleSave, saveRef]);\n\n  return (\n    <ChatPromptsTab\n      title={title}\n      text={text}\n      onTitleChange={setTitle}\n      onTextChange={setText}\n      prompts={prompts}\n      query={query}\n      personas={personas}\n    />\n  );\n}\n\ninterface CodexTabPanelProps {\n  prompts: PromptWithTitle[];\n  query: string;\n  savePrompt: (title: string, text: string) => boolean;\n  saveRef: React.MutableRefObject<(() => void) | null>;\n  onCanSaveChange: (canSave: boolean) => void;\n}\n\nfunction CodexTabPanel({\n  prompts,\n  query,\n  savePrompt,\n  saveRef,\n  onCanSaveChange,\n}: CodexTabPanelProps) {\n  const [title, setTitle] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n\n  const canSave = React.useMemo(() => {\n    return Boolean(title.trim() || text.trim());\n  }, [text, title]);\n\n  React.useEffect(() => {\n    onCanSaveChange(canSave);\n  }, [canSave, onCanSaveChange]);\n\n  React.useEffect(() => {\n    return () => {\n      onCanSaveChange(false);\n    };\n  }, [onCanSaveChange]);\n\n  const handleSave = React.useCallback(() => {\n    if (savePrompt(title, text)) {\n      setTitle(\"\");\n      setText(\"\");\n    }\n  }, [savePrompt, text, title]);\n\n  React.useEffect(() => {\n    saveRef.current = handleSave;\n    return () => {\n      if (saveRef.current === handleSave) {\n        saveRef.current = null;\n      }\n    };\n  }, [handleSave, saveRef]);\n\n  return (\n    <CodexPromptsTab\n      title={title}\n      text={text}\n      onTitleChange={setTitle}\n      onTextChange={setText}\n      prompts={prompts}\n      query={query}\n    />\n  );\n}\n\nfunction TabFallback({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      role=\"status\"\n      aria-live=\"polite\"\n      className=\"rounded-[var(--radius-md)] border border-dashed border-border bg-muted/30 p-[var(--space-4)] text-center text-ui text-muted-foreground\"\n    >\n      {children}\n    </div>\n  );\n}\n\n","\"use client\";\n\nimport * as React from \"react\";\n\nimport { Card } from \"@/components/ui\";\nimport { PromptsComposePanel } from \"./PromptsComposePanel\";\nimport { PromptList } from \"./PromptList\";\nimport type { Persona, PromptWithTitle } from \"./types\";\nimport { LOCALE } from \"@/lib/utils\";\n\ninterface ChatPromptsTabProps {\n  title: string;\n  text: string;\n  onTitleChange: (value: string) => void;\n  onTextChange: (value: string) => void;\n  prompts: PromptWithTitle[];\n  query: string;\n  personas: Persona[];\n}\n\nexport function ChatPromptsTab({\n  title,\n  text,\n  onTitleChange,\n  onTextChange,\n  prompts,\n  query,\n  personas,\n}: ChatPromptsTabProps) {\n  const composeHeadingId = React.useId();\n  const personasHeadingId = React.useId();\n  const libraryHeadingId = React.useId();\n\n  return (\n    <div className=\"flex flex-col gap-[var(--space-6)]\">\n      <section\n        aria-labelledby={composeHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={composeHeadingId} className=\"type-title\">\n            Compose prompt\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Draft a ChatGPT request and save it for future reuse.\n          </p>\n        </div>\n        <PromptsComposePanel\n          title={title}\n          onTitleChange={onTitleChange}\n          text={text}\n          onTextChange={onTextChange}\n        />\n      </section>\n\n      <section\n        aria-labelledby={personasHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={personasHeadingId} className=\"type-title\">\n            Personas\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Keep tailored introductions to quickly set tone and context.\n          </p>\n        </div>\n        {personas.length > 0 ? (\n          <ul className=\"grid gap-[var(--space-3)] md:grid-cols-2\">\n            {personas.map((persona) => (\n              <li key={persona.id}>\n                <Card className=\"flex h-full flex-col gap-[var(--space-3)] p-[var(--space-4)]\">\n                  <header className=\"space-y-[var(--space-1)]\">\n                    <h4 className=\"font-semibold text-body\">{persona.name}</h4>\n                    {persona.description ? (\n                      <p className=\"text-ui text-muted-foreground\">\n                        {persona.description}\n                      </p>\n                    ) : null}\n                    <time\n                      dateTime={new Date(persona.createdAt).toISOString()}\n                      className=\"block text-label text-muted-foreground\"\n                    >\n                      Added {new Date(persona.createdAt).toLocaleString(LOCALE)}\n                    </time>\n                  </header>\n                  <p className=\"whitespace-pre-wrap rounded-[var(--radius-md)] bg-card/60 p-[var(--space-3)] text-ui\">\n                    {persona.prompt}\n                  </p>\n                </Card>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-ui text-muted-foreground\">\n            No personas yet. Start a collection to keep favorite tones handy.\n          </p>\n        )}\n      </section>\n\n      <section\n        aria-labelledby={libraryHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={libraryHeadingId} className=\"type-title\">\n            Reusable prompts\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Saved ChatGPT prompts appear here with newest first.\n          </p>\n        </div>\n        <PromptList prompts={prompts} query={query} />\n      </section>\n    </div>\n  );\n}\n","export type Prompt = {\n  id: string;\n  title?: string;\n  text: string;\n  createdAt: number;\n};\n\nexport type PromptWithTitle = Prompt & { title: string };\n\nexport type Persona = {\n  id: string;\n  name: string;\n  prompt: string;\n  description?: string;\n  createdAt: number;\n};\n\nexport function derivePromptTitle(prompt: Prompt): string {\n  if (prompt.title && prompt.title.trim()) return prompt.title.trim();\n  const firstLine = (prompt.text || \"\")\n    .split(/\\r?\\n/)\n    .find((line) => line.trim())?.trim();\n  return firstLine || \"Untitled\";\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport type Fuse from \"fuse.js\";\nimport { usePersistentState, uid } from \"@/lib/db\";\nimport {\n  derivePromptTitle,\n  type Prompt,\n  type PromptWithTitle,\n} from \"./types\";\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === \"object\" && value !== null && !Array.isArray(value);\n}\n\nfunction decodePrompt(value: unknown): Prompt | null {\n  if (!isRecord(value)) return null;\n  const id = value[\"id\"];\n  const text = value[\"text\"];\n  const createdAt = value[\"createdAt\"];\n  if (typeof id !== \"string\") return null;\n  if (typeof text !== \"string\") return null;\n  if (typeof createdAt !== \"number\" || !Number.isFinite(createdAt)) return null;\n  const prompt: Prompt = { id, text, createdAt };\n  const title = value[\"title\"];\n  if (typeof title === \"string\") {\n    prompt.title = title;\n  }\n  return prompt;\n}\n\nexport function decodePrompts(value: unknown): Prompt[] | null {\n  if (!Array.isArray(value)) return null;\n  const result: Prompt[] = [];\n  for (const entry of value) {\n    const prompt = decodePrompt(entry);\n    if (prompt) result.push(prompt);\n  }\n  return result;\n}\n\nconst EMPTY_PROMPT_LIST: Prompt[] = [];\n\nexport function usePromptLibrary(storageKey: string) {\n  const [prompts, setPrompts] = usePersistentState<Prompt[]>(storageKey, EMPTY_PROMPT_LIST, {\n    decode: decodePrompts,\n  });\n  const [query, setQuery] = React.useState(\"\");\n\n  const withTitles = React.useMemo(\n    () => prompts.map((prompt) => ({ ...prompt, title: derivePromptTitle(prompt) })),\n    [prompts],\n  );\n\n  const fuseModulePromiseRef = React.useRef<Promise<typeof import(\"fuse.js\")> | null>(null);\n  const fuseRef = React.useRef<Fuse<PromptWithTitle> | null>(null);\n\n  const [filtered, setFiltered] = React.useState<PromptWithTitle[]>(withTitles);\n\n  const ensureFuse = React.useCallback(async () => {\n    if (!fuseModulePromiseRef.current) {\n      fuseModulePromiseRef.current = import(\"fuse.js\");\n    }\n    const { default: FuseModule } = await fuseModulePromiseRef.current;\n    if (fuseRef.current) {\n      fuseRef.current.setCollection(withTitles);\n      return fuseRef.current;\n    }\n    const instance = new FuseModule<PromptWithTitle>(withTitles, {\n      keys: [\"title\", \"text\"],\n      threshold: 0.3,\n    });\n    fuseRef.current = instance;\n    return instance;\n  }, [withTitles]);\n\n  React.useEffect(() => {\n    const trimmed = query.trim();\n    if (!trimmed) {\n      setFiltered(withTitles);\n      return;\n    }\n\n    let cancelled = false;\n\n    if (!fuseRef.current) {\n      const lowered = trimmed.toLowerCase();\n      setFiltered(\n        withTitles.filter((prompt) => {\n          return (\n            prompt.title.toLowerCase().includes(lowered) ||\n            prompt.text.toLowerCase().includes(lowered)\n          );\n        }),\n      );\n    }\n\n    const runSearch = async () => {\n      const fuse = await ensureFuse();\n      if (cancelled) return;\n      const results = fuse.search(trimmed);\n      if (cancelled) return;\n      setFiltered(results.map((res) => res.item));\n    };\n\n    void runSearch();\n\n    return () => {\n      cancelled = true;\n    };\n  }, [ensureFuse, query, withTitles]);\n\n  const save = React.useCallback(\n    (titleDraft: string, textDraft: string) => {\n      const text = textDraft.trim();\n      const title =\n        titleDraft.trim() || text.split(/\\r?\\n/)[0]?.trim() || \"Untitled\";\n      if (!text && !titleDraft.trim()) return false;\n      const next: Prompt = {\n        id: uid(\"p\"),\n        title,\n        text,\n        createdAt: Date.now(),\n      };\n      setPrompts((prev) => [next, ...prev]);\n      return true;\n    },\n    [setPrompts],\n  );\n\n  return { prompts, query, setQuery, filtered, save } as const;\n}\n","\"use client\";\n\nimport { usePersistentState } from \"@/lib/db\";\n\nexport const PROMPT_NOTES_STORAGE_KEY = \"prompts.notes.v1\" as const;\n\nexport function useNotes() {\n  return usePersistentState<string>(PROMPT_NOTES_STORAGE_KEY, \"\");\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/components/ui\";\nimport { Badge } from \"@/components/ui/primitives/Badge\";\nimport { LOCALE } from \"@/lib/utils\";\nimport type { PromptWithTitle } from \"./types\";\n\nexport type PromptListProps = {\n  prompts: PromptWithTitle[];\n  query: string;\n};\n\nexport function PromptList({ prompts, query }: PromptListProps) {\n  const q = query.trim();\n  const formattedPrompts = React.useMemo(\n    () =>\n      prompts.map((p) => {\n        const createdAt = new Date(p.createdAt);\n        return {\n          ...p,\n          createdAtDateTime: createdAt.toISOString(),\n          createdAtLabel: createdAt.toLocaleString(LOCALE),\n        };\n      }),\n    [prompts],\n  );\n  return (\n    <ul className=\"mt-[var(--space-4)] space-y-[var(--space-3)]\">\n      {formattedPrompts.map((p) => (\n        <li key={p.id}>\n          <Card className=\"p-[var(--space-3)]\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">{p.title}</h3>\n              <time\n                dateTime={p.createdAtDateTime}\n                className=\"text-label text-muted-foreground\"\n              >\n                {p.createdAtLabel}\n              </time>\n            </header>\n            {p.text ? (\n              <p className=\"mt-[var(--space-1)] whitespace-pre-wrap text-ui\">{p.text}</p>\n            ) : null}\n          </Card>\n        </li>\n      ))}\n      {prompts.length === 0 ? (\n        <li className=\"text-muted-foreground flex items-center gap-[var(--space-1)]\">\n          {q ? (\n            <>\n              No prompts match\n              <Badge size=\"sm\" tone=\"neutral\">{q}</Badge>\n            </>\n          ) : (\n            \"No prompts saved yet\"\n          )}\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\n","\"use client\";\n\nimport { usePersistentState } from \"@/lib/db\";\nimport type { Persona } from \"./types\";\n\nexport const PROMPT_PERSONAS_STORAGE_KEY = \"prompts.personas.v1\" as const;\nconst EMPTY_PERSONA_LIST: Persona[] = [];\n\nexport function usePersonas() {\n  return usePersistentState<Persona[]>(\n    PROMPT_PERSONAS_STORAGE_KEY,\n    EMPTY_PERSONA_LIST,\n  );\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Button, PageHeader } from \"@/components/ui\";\nimport { Badge } from \"@/components/ui/primitives/Badge\";\n\nconst chips = [\"hover\", \"focus\", \"active\", \"disabled\", \"loading\"];\n\ninterface PromptsHeaderProps {\n  id?: string;\n  count: number;\n  query: string;\n  onQueryChange: (value: string) => void;\n  onSave: () => void;\n  disabled: boolean;\n}\n\nexport function PromptsHeader({\n  id = \"prompts-header\",\n  count,\n  query,\n  onQueryChange,\n  onSave,\n  disabled,\n}: PromptsHeaderProps) {\n  const handleChip = React.useCallback(\n    (chip: string) => {\n      const nextQuery = query === chip ? \"\" : chip;\n      onQueryChange(nextQuery);\n    },\n    [onQueryChange, query],\n  );\n\n  const searchId = `${id}-search`;\n\n  return (\n    <PageHeader\n      containerClassName=\"relative isolate\"\n      header={{\n        id,\n        heading: \"Prompts\",\n        sticky: false,\n        right: (\n          <span className=\"pill\" aria-live=\"polite\">\n            {count} saved\n          </span>\n        ),\n      }}\n      hero={{\n        sticky: false,\n        tone: \"supportive\",\n        topClassName: \"top-[var(--header-stack)]\",\n        heading: (\n          <span className=\"sr-only\" id={`${id}-hero`}>\n            Prompt workspace controls\n          </span>\n        ),\n        children: (\n          <div className=\"hidden sm:flex flex-wrap items-center gap-[var(--space-2)]\">\n            {chips.map((chip) => {\n              const isSelected = query === chip;\n\n              return (\n                <Badge\n                  key={chip}\n                  interactive\n                  selected={isSelected}\n                  aria-pressed={isSelected}\n                  onClick={() => handleChip(chip)}\n                >\n                  {chip}\n                </Badge>\n              );\n            })}\n          </div>\n        ),\n        search: {\n          id: searchId,\n          value: query,\n          onValueChange: onQueryChange,\n          debounceMs: 300,\n          placeholder: \"Search prompts…\",\n          \"aria-label\": \"Search prompts\",\n          variant: \"neo\",\n          round: true,\n        },\n        actions: (\n          <Button type=\"button\" variant=\"default\" onClick={onSave} disabled={disabled}>\n            Save\n          </Button>\n        ),\n      }}\n    />\n  );\n}\n\n","\"use client\";\n\nimport { usePromptLibrary } from \"./usePromptLibrary\";\n\nexport const CHAT_PROMPTS_STORAGE_KEY = \"prompts.chat.v1\" as const;\n\nexport function useChatPrompts() {\n  return usePromptLibrary(CHAT_PROMPTS_STORAGE_KEY);\n}\n","\"use client\";\n\nimport { usePromptLibrary } from \"./usePromptLibrary\";\n\nexport const CODEX_PROMPTS_STORAGE_KEY = \"prompts.codex.v1\" as const;\n\nexport function useCodexPrompts() {\n  return usePromptLibrary(CODEX_PROMPTS_STORAGE_KEY);\n}\n","\"use client\";\n\nimport { Input, Textarea, Label } from \"@/components/ui\";\nimport { useFieldIds } from \"@/lib/useFieldIds\";\nimport { Check as CheckIcon } from \"lucide-react\";\n\ninterface PromptsComposePanelProps {\n  title: string;\n  onTitleChange: (value: string) => void;\n  text: string;\n  onTextChange: (value: string) => void;\n}\n\nexport function PromptsComposePanel({\n  title,\n  onTitleChange,\n  text,\n  onTextChange,\n}: PromptsComposePanelProps) {\n  const titleField = useFieldIds();\n  const textField = useFieldIds();\n  const titleHelpId = `${titleField.id}-help`;\n  return (\n    <div className=\"space-y-[var(--space-3)]\">\n      <div>\n        <Label htmlFor={titleField.id}>Title</Label>\n        <Input\n          id={titleField.id}\n          name={titleField.name}\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => onTitleChange(e.target.value)}\n          aria-describedby={titleHelpId}\n        >\n          <CheckIcon\n            aria-hidden=\"true\"\n            className=\"absolute right-[var(--space-2)] top-1/2 -translate-y-1/2\"\n          />\n        </Input>\n        <p\n          id={titleHelpId}\n          className=\"mt-[var(--space-1)] text-label text-muted-foreground\"\n        >\n          Add a short title\n        </p>\n      </div>\n      <div>\n        <Label htmlFor={textField.id}>Prompt</Label>\n        <Textarea\n          id={textField.id}\n          name={textField.name}\n          placeholder=\"Write your prompt or snippet…\"\n          value={text}\n          onChange={(e) => onTextChange(e.target.value)}\n          resize=\"resize-y\"\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["CodexPromptsTab","React","default","NotesTab","BASE_TAB_ITEMS","key","label","PromptsPage","prompts","chatPrompts","query","chatQuery","setQuery","setChatQuery","filtered","chatFiltered","save","saveChatPrompt","useChatPrompts","codexPrompts","codexQuery","setCodexQuery","codexFiltered","saveCodexPrompt","useCodexPrompts","personas","usePersonas","notes","setNotes","useNotes","activeTab","setActiveTab","usePersistentState","chatSaveRef","codexSaveRef","chatCanSave","setChatCanSave","codexCanSave","setCodexCanSave","tabItems","map","item","badge","length","undefined","hasNotes","trim","activeQuery","handleQueryChange","value","handleSave","current","saveDisabled","activeCount","PageShell","as","className","PromptsHeader","id","count","onQueryChange","onSave","disabled","aria-labelledby","Tabs","onValueChange","idBase","TabList","items","ariaLabel","variant","showBaseline","TabPanel","ChatTabPanel","savePrompt","saveRef","onCanSaveChange","fallback","TabFallback","CodexTabPanel","onChange","title","setTitle","text","setText","canSave","Boolean","ChatPromptsTab","onTitleChange","onTextChange","children","div","role","aria-live","composeHeadingId","personasHeadingId","libraryHeadingId","section","h3","p","PromptsComposePanel","ul","li","Card","header","h4","persona","name","description","time","dateTime","Date","createdAt","toISOString","toLocaleString","LOCALE","prompt","PromptList","decodePrompts","Array","isArray","result","entry","decodePrompt","isRecord","Number","isFinite","push","EMPTY_PROMPT_LIST","usePromptLibrary","storageKey","setPrompts","decode","withTitles","derivePromptTitle","firstLine","split","find","line","fuseModulePromiseRef","fuseRef","setFiltered","ensureFuse","FuseModule","setCollection","instance","keys","threshold","trimmed","cancelled","lowered","toLowerCase","filter","includes","runSearch","fuse","results","search","res","titleDraft","textDraft","next","uid","now","prev","q","formattedPrompts","createdAtDateTime","createdAtLabel","Badge","size","tone","EMPTY_PERSONA_LIST","PROMPT_PERSONAS_STORAGE_KEY","chips","handleChip","chip","nextQuery","searchId","PageHeader","containerClassName","heading","sticky","right","span","hero","topClassName","isSelected","interactive","selected","aria-pressed","onClick","debounceMs","placeholder","round","actions","Button","type","CODEX_PROMPTS_STORAGE_KEY","titleField","useFieldIds","textField","titleHelpId","Label","htmlFor","Input","e","target","aria-describedby","CheckIcon","aria-hidden","Textarea","resize"],"sourceRoot":"","ignoreList":[]}
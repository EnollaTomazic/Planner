{"version":3,"file":"static/chunks/8899-332eb2c91a743c10.js","mappings":"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","sources":["webpack://_N_E/./src/components/prompts/PromptsPage.tsx","webpack://_N_E/./src/components/prompts/ChatPromptsTab.tsx","webpack://_N_E/./src/components/prompts/types.ts","webpack://_N_E/./src/components/prompts/usePromptLibrary.ts","webpack://_N_E/./src/components/prompts/useNotes.ts","webpack://_N_E/./src/components/prompts/PromptList.tsx","webpack://_N_E/./src/components/prompts/usePersonas.ts","webpack://_N_E/./src/components/prompts/PromptsHeader.tsx","webpack://_N_E/./src/components/prompts/useChatPrompts.ts","webpack://_N_E/./src/components/prompts/CodexPromptsTab.tsx","webpack://_N_E/./src/components/prompts/useCodexPrompts.ts","webpack://_N_E/./src/components/prompts/PromptsComposePanel.tsx","webpack://_N_E/./src/components/prompts/NotesTab.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\n\nimport { PageShell } from \"@/components/ui\";\nimport { Tabs, TabList, TabPanel, type TabListItem } from \"@/components/ui/primitives/Tabs\";\nimport { usePersistentState } from \"@/lib/db\";\nimport { PromptsHeader } from \"./PromptsHeader\";\nimport { ChatPromptsTab } from \"./ChatPromptsTab\";\nimport { CodexPromptsTab } from \"./CodexPromptsTab\";\nimport { NotesTab } from \"./NotesTab\";\nimport { useChatPrompts } from \"./useChatPrompts\";\nimport { useCodexPrompts } from \"./useCodexPrompts\";\nimport { useNotes } from \"./useNotes\";\nimport { usePersonas } from \"./usePersonas\";\n\nconst TAB_STORAGE_KEY = \"prompts.tab.v1\" as const;\n\nconst BASE_TAB_ITEMS = [\n  { key: \"chat\", label: \"ChatGPT\" },\n  { key: \"codex\", label: \"Codex review\" },\n  { key: \"notes\", label: \"Notes\" },\n] as const;\n\ntype PromptsTabKey = (typeof BASE_TAB_ITEMS)[number][\"key\"];\n\nexport function PromptsPage() {\n  const {\n    prompts: chatPrompts,\n    query: chatQuery,\n    setQuery: setChatQuery,\n    filtered: chatFiltered,\n    save: saveChatPrompt,\n  } = useChatPrompts();\n  const {\n    prompts: codexPrompts,\n    query: codexQuery,\n    setQuery: setCodexQuery,\n    filtered: codexFiltered,\n    save: saveCodexPrompt,\n  } = useCodexPrompts();\n  const [personas] = usePersonas();\n  const [notes, setNotes] = useNotes();\n\n  const [activeTab, setActiveTab] = usePersistentState<PromptsTabKey>(\n    TAB_STORAGE_KEY,\n    \"chat\",\n  );\n\n  const [chatTitleDraft, setChatTitleDraft] = React.useState(\"\");\n  const [chatTextDraft, setChatTextDraft] = React.useState(\"\");\n  const [codexTitleDraft, setCodexTitleDraft] = React.useState(\"\");\n  const [codexTextDraft, setCodexTextDraft] = React.useState(\"\");\n\n  const handleChatSave = React.useCallback(() => {\n    if (saveChatPrompt(chatTitleDraft, chatTextDraft)) {\n      setChatTitleDraft(\"\");\n      setChatTextDraft(\"\");\n    }\n  }, [chatTitleDraft, chatTextDraft, saveChatPrompt]);\n\n  const handleCodexSave = React.useCallback(() => {\n    if (saveCodexPrompt(codexTitleDraft, codexTextDraft)) {\n      setCodexTitleDraft(\"\");\n      setCodexTextDraft(\"\");\n    }\n  }, [codexTextDraft, codexTitleDraft, saveCodexPrompt]);\n\n  const tabItems = React.useMemo<TabListItem<PromptsTabKey>[]>(() => {\n    return BASE_TAB_ITEMS.map<TabListItem<PromptsTabKey>>((item) => {\n      if (item.key === \"chat\") {\n        return {\n          ...item,\n          badge: chatPrompts.length > 0 ? chatPrompts.length : undefined,\n        };\n      }\n      if (item.key === \"codex\") {\n        return {\n          ...item,\n          badge: codexPrompts.length > 0 ? codexPrompts.length : undefined,\n        };\n      }\n      const hasNotes = notes.trim().length > 0;\n      return {\n        ...item,\n        badge: hasNotes ? 1 : undefined,\n      };\n    });\n  }, [chatPrompts.length, codexPrompts.length, notes]);\n\n  const activeQuery = React.useMemo(() => {\n    if (activeTab === \"chat\") return chatQuery;\n    if (activeTab === \"codex\") return codexQuery;\n    return \"\";\n  }, [activeTab, chatQuery, codexQuery]);\n\n  const handleQueryChange = React.useCallback(\n    (value: string) => {\n      if (activeTab === \"chat\") {\n        setChatQuery(value);\n        return;\n      }\n      if (activeTab === \"codex\") {\n        setCodexQuery(value);\n      }\n    },\n    [activeTab, setChatQuery, setCodexQuery],\n  );\n\n  const handleSave = React.useCallback(() => {\n    if (activeTab === \"chat\") {\n      handleChatSave();\n      return;\n    }\n    if (activeTab === \"codex\") {\n      handleCodexSave();\n    }\n  }, [activeTab, handleChatSave, handleCodexSave]);\n\n  const saveDisabled = React.useMemo(() => {\n    if (activeTab === \"chat\") {\n      return !chatTitleDraft.trim() && !chatTextDraft.trim();\n    }\n    if (activeTab === \"codex\") {\n      return !codexTitleDraft.trim() && !codexTextDraft.trim();\n    }\n    return true;\n  }, [activeTab, chatTitleDraft, chatTextDraft, codexTitleDraft, codexTextDraft]);\n\n  const activeCount = React.useMemo(() => {\n    if (activeTab === \"chat\") return chatPrompts.length;\n    if (activeTab === \"codex\") return codexPrompts.length;\n    return notes.trim().length > 0 ? 1 : 0;\n  }, [activeTab, chatPrompts.length, codexPrompts.length, notes]);\n\n  return (\n    <>\n      <PageShell as=\"header\" className=\"py-[var(--space-6)]\">\n        <PromptsHeader\n          id=\"prompts-header\"\n          count={activeCount}\n          query={activeQuery}\n          onQueryChange={handleQueryChange}\n          onSave={handleSave}\n          disabled={saveDisabled}\n        />\n      </PageShell>\n\n      <PageShell\n        as=\"section\"\n        className=\"space-y-[var(--space-6)] py-[var(--space-6)]\"\n        aria-labelledby=\"prompts-header\"\n      >\n        <Tabs value={activeTab} onValueChange={setActiveTab} idBase=\"prompts-tabs\">\n          <TabList\n            items={tabItems}\n            ariaLabel=\"Prompt workspaces\"\n            variant=\"neo\"\n            showBaseline\n          />\n\n          <TabPanel value=\"chat\" className=\"pb-[var(--space-8)]\">\n            <ChatPromptsTab\n              title={chatTitleDraft}\n              text={chatTextDraft}\n              onTitleChange={setChatTitleDraft}\n              onTextChange={setChatTextDraft}\n              prompts={chatFiltered}\n              query={chatQuery}\n              personas={personas}\n            />\n          </TabPanel>\n\n          <TabPanel value=\"codex\" className=\"pb-[var(--space-8)]\">\n            <CodexPromptsTab\n              title={codexTitleDraft}\n              text={codexTextDraft}\n              onTitleChange={setCodexTitleDraft}\n              onTextChange={setCodexTextDraft}\n              prompts={codexFiltered}\n              query={codexQuery}\n            />\n          </TabPanel>\n\n          <TabPanel value=\"notes\" className=\"pb-[var(--space-8)]\">\n            <NotesTab value={notes} onChange={setNotes} />\n          </TabPanel>\n        </Tabs>\n      </PageShell>\n    </>\n  );\n}\n\n","\"use client\";\n\nimport * as React from \"react\";\n\nimport { Card } from \"@/components/ui\";\nimport { PromptsComposePanel } from \"./PromptsComposePanel\";\nimport { PromptList } from \"./PromptList\";\nimport type { Persona, PromptWithTitle } from \"./types\";\nimport { LOCALE } from \"@/lib/utils\";\n\ninterface ChatPromptsTabProps {\n  title: string;\n  text: string;\n  onTitleChange: (value: string) => void;\n  onTextChange: (value: string) => void;\n  prompts: PromptWithTitle[];\n  query: string;\n  personas: Persona[];\n}\n\nexport function ChatPromptsTab({\n  title,\n  text,\n  onTitleChange,\n  onTextChange,\n  prompts,\n  query,\n  personas,\n}: ChatPromptsTabProps) {\n  const composeHeadingId = React.useId();\n  const personasHeadingId = React.useId();\n  const libraryHeadingId = React.useId();\n\n  return (\n    <div className=\"flex flex-col gap-[var(--space-6)]\">\n      <section\n        aria-labelledby={composeHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={composeHeadingId} className=\"type-title\">\n            Compose prompt\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Draft a ChatGPT request and save it for future reuse.\n          </p>\n        </div>\n        <PromptsComposePanel\n          title={title}\n          onTitleChange={onTitleChange}\n          text={text}\n          onTextChange={onTextChange}\n        />\n      </section>\n\n      <section\n        aria-labelledby={personasHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={personasHeadingId} className=\"type-title\">\n            Personas\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Keep tailored introductions to quickly set tone and context.\n          </p>\n        </div>\n        {personas.length > 0 ? (\n          <ul className=\"grid gap-[var(--space-3)] md:grid-cols-2\">\n            {personas.map((persona) => (\n              <li key={persona.id}>\n                <Card className=\"flex h-full flex-col gap-[var(--space-3)] p-[var(--space-4)]\">\n                  <header className=\"space-y-[var(--space-1)]\">\n                    <h4 className=\"font-semibold text-body\">{persona.name}</h4>\n                    {persona.description ? (\n                      <p className=\"text-ui text-muted-foreground\">\n                        {persona.description}\n                      </p>\n                    ) : null}\n                    <time\n                      dateTime={new Date(persona.createdAt).toISOString()}\n                      className=\"block text-label text-muted-foreground\"\n                    >\n                      Added {new Date(persona.createdAt).toLocaleString(LOCALE)}\n                    </time>\n                  </header>\n                  <p className=\"whitespace-pre-wrap rounded-[var(--radius-md)] bg-card/60 p-[var(--space-3)] text-ui\">\n                    {persona.prompt}\n                  </p>\n                </Card>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-ui text-muted-foreground\">\n            No personas yet. Start a collection to keep favorite tones handy.\n          </p>\n        )}\n      </section>\n\n      <section\n        aria-labelledby={libraryHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={libraryHeadingId} className=\"type-title\">\n            Reusable prompts\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Saved ChatGPT prompts appear here with newest first.\n          </p>\n        </div>\n        <PromptList prompts={prompts} query={query} />\n      </section>\n    </div>\n  );\n}\n","export type Prompt = {\n  id: string;\n  title?: string;\n  text: string;\n  createdAt: number;\n};\n\nexport type PromptWithTitle = Prompt & { title: string };\n\nexport type Persona = {\n  id: string;\n  name: string;\n  prompt: string;\n  description?: string;\n  createdAt: number;\n};\n\nexport function derivePromptTitle(prompt: Prompt): string {\n  if (prompt.title && prompt.title.trim()) return prompt.title.trim();\n  const firstLine = (prompt.text || \"\")\n    .split(/\\r?\\n/)\n    .find((line) => line.trim())?.trim();\n  return firstLine || \"Untitled\";\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport type Fuse from \"fuse.js\";\nimport { usePersistentState, uid } from \"@/lib/db\";\nimport {\n  derivePromptTitle,\n  type Prompt,\n  type PromptWithTitle,\n} from \"./types\";\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === \"object\" && value !== null && !Array.isArray(value);\n}\n\nfunction decodePrompt(value: unknown): Prompt | null {\n  if (!isRecord(value)) return null;\n  const id = value[\"id\"];\n  const text = value[\"text\"];\n  const createdAt = value[\"createdAt\"];\n  if (typeof id !== \"string\") return null;\n  if (typeof text !== \"string\") return null;\n  if (typeof createdAt !== \"number\" || !Number.isFinite(createdAt)) return null;\n  const prompt: Prompt = { id, text, createdAt };\n  const title = value[\"title\"];\n  if (typeof title === \"string\") {\n    prompt.title = title;\n  }\n  return prompt;\n}\n\nexport function decodePrompts(value: unknown): Prompt[] | null {\n  if (!Array.isArray(value)) return null;\n  const result: Prompt[] = [];\n  for (const entry of value) {\n    const prompt = decodePrompt(entry);\n    if (prompt) result.push(prompt);\n  }\n  return result;\n}\n\nexport function usePromptLibrary(storageKey: string) {\n  const [prompts, setPrompts] = usePersistentState<Prompt[]>(storageKey, [], {\n    decode: decodePrompts,\n  });\n  const [query, setQuery] = React.useState(\"\");\n\n  const withTitles = React.useMemo(\n    () => prompts.map((prompt) => ({ ...prompt, title: derivePromptTitle(prompt) })),\n    [prompts],\n  );\n\n  const fuseModulePromiseRef = React.useRef<Promise<typeof import(\"fuse.js\")> | null>(null);\n  const fuseRef = React.useRef<Fuse<PromptWithTitle> | null>(null);\n\n  const [filtered, setFiltered] = React.useState<PromptWithTitle[]>(withTitles);\n\n  const ensureFuse = React.useCallback(async () => {\n    if (!fuseModulePromiseRef.current) {\n      fuseModulePromiseRef.current = import(\"fuse.js\");\n    }\n    const { default: FuseModule } = await fuseModulePromiseRef.current;\n    if (fuseRef.current) {\n      fuseRef.current.setCollection(withTitles);\n      return fuseRef.current;\n    }\n    const instance = new FuseModule<PromptWithTitle>(withTitles, {\n      keys: [\"title\", \"text\"],\n      threshold: 0.3,\n    });\n    fuseRef.current = instance;\n    return instance;\n  }, [withTitles]);\n\n  React.useEffect(() => {\n    const trimmed = query.trim();\n    if (!trimmed) {\n      setFiltered(withTitles);\n      return;\n    }\n\n    let cancelled = false;\n\n    if (!fuseRef.current) {\n      const lowered = trimmed.toLowerCase();\n      setFiltered(\n        withTitles.filter((prompt) => {\n          return (\n            prompt.title.toLowerCase().includes(lowered) ||\n            prompt.text.toLowerCase().includes(lowered)\n          );\n        }),\n      );\n    }\n\n    const runSearch = async () => {\n      const fuse = await ensureFuse();\n      if (cancelled) return;\n      const results = fuse.search(trimmed);\n      if (cancelled) return;\n      setFiltered(results.map((res) => res.item));\n    };\n\n    void runSearch();\n\n    return () => {\n      cancelled = true;\n    };\n  }, [ensureFuse, query, withTitles]);\n\n  const save = React.useCallback(\n    (titleDraft: string, textDraft: string) => {\n      const text = textDraft.trim();\n      const title =\n        titleDraft.trim() || text.split(/\\r?\\n/)[0]?.trim() || \"Untitled\";\n      if (!text && !titleDraft.trim()) return false;\n      const next: Prompt = {\n        id: uid(\"p\"),\n        title,\n        text,\n        createdAt: Date.now(),\n      };\n      setPrompts((prev) => [next, ...prev]);\n      return true;\n    },\n    [setPrompts],\n  );\n\n  return { prompts, query, setQuery, filtered, save } as const;\n}\n","\"use client\";\n\nimport { usePersistentState } from \"@/lib/db\";\n\nexport const PROMPT_NOTES_STORAGE_KEY = \"prompts.notes.v1\" as const;\n\nexport function useNotes() {\n  return usePersistentState<string>(PROMPT_NOTES_STORAGE_KEY, \"\");\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/components/ui\";\nimport { Badge } from \"@/components/ui/primitives/Badge\";\nimport { LOCALE } from \"@/lib/utils\";\nimport type { PromptWithTitle } from \"./types\";\n\nexport type PromptListProps = {\n  prompts: PromptWithTitle[];\n  query: string;\n};\n\nexport function PromptList({ prompts, query }: PromptListProps) {\n  const q = query.trim();\n  const formattedPrompts = React.useMemo(\n    () =>\n      prompts.map((p) => {\n        const createdAt = new Date(p.createdAt);\n        return {\n          ...p,\n          createdAtDateTime: createdAt.toISOString(),\n          createdAtLabel: createdAt.toLocaleString(LOCALE),\n        };\n      }),\n    [prompts],\n  );\n  return (\n    <ul className=\"mt-[var(--space-4)] space-y-[var(--space-3)]\">\n      {formattedPrompts.map((p) => (\n        <li key={p.id}>\n          <Card className=\"p-[var(--space-3)]\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">{p.title}</h3>\n              <time\n                dateTime={p.createdAtDateTime}\n                className=\"text-label text-muted-foreground\"\n              >\n                {p.createdAtLabel}\n              </time>\n            </header>\n            {p.text ? (\n              <p className=\"mt-[var(--space-1)] whitespace-pre-wrap text-ui\">{p.text}</p>\n            ) : null}\n          </Card>\n        </li>\n      ))}\n      {prompts.length === 0 ? (\n        <li className=\"text-muted-foreground flex items-center gap-[var(--space-1)]\">\n          {q ? (\n            <>\n              No prompts match\n              <Badge size=\"sm\" tone=\"neutral\">{q}</Badge>\n            </>\n          ) : (\n            \"No prompts saved yet\"\n          )}\n        </li>\n      ) : null}\n    </ul>\n  );\n}\n\n","\"use client\";\n\nimport { usePersistentState } from \"@/lib/db\";\nimport type { Persona } from \"./types\";\n\nexport const PROMPT_PERSONAS_STORAGE_KEY = \"prompts.personas.v1\" as const;\n\nexport function usePersonas() {\n  return usePersistentState<Persona[]>(PROMPT_PERSONAS_STORAGE_KEY, []);\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Button, PageHeader } from \"@/components/ui\";\nimport { Badge } from \"@/components/ui/primitives/Badge\";\n\nconst chips = [\"hover\", \"focus\", \"active\", \"disabled\", \"loading\"];\n\ninterface PromptsHeaderProps {\n  id?: string;\n  count: number;\n  query: string;\n  onQueryChange: (value: string) => void;\n  onSave: () => void;\n  disabled: boolean;\n}\n\nexport function PromptsHeader({\n  id = \"prompts-header\",\n  count,\n  query,\n  onQueryChange,\n  onSave,\n  disabled,\n}: PromptsHeaderProps) {\n  const handleChip = React.useCallback(\n    (chip: string) => {\n      const nextQuery = query === chip ? \"\" : chip;\n      onQueryChange(nextQuery);\n    },\n    [onQueryChange, query],\n  );\n\n  const searchId = `${id}-search`;\n\n  return (\n    <PageHeader\n      containerClassName=\"relative isolate\"\n      header={{\n        id,\n        heading: \"Prompts\",\n        sticky: false,\n        right: (\n          <span className=\"pill\" aria-live=\"polite\">\n            {count} saved\n          </span>\n        ),\n      }}\n      hero={{\n        sticky: false,\n        tone: \"supportive\",\n        topClassName: \"top-[var(--header-stack)]\",\n        heading: (\n          <span className=\"sr-only\" id={`${id}-hero`}>\n            Prompt workspace controls\n          </span>\n        ),\n        children: (\n          <div className=\"hidden sm:flex flex-wrap items-center gap-[var(--space-2)]\">\n            {chips.map((chip) => {\n              const isSelected = query === chip;\n\n              return (\n                <Badge\n                  key={chip}\n                  interactive\n                  selected={isSelected}\n                  aria-pressed={isSelected}\n                  onClick={() => handleChip(chip)}\n                >\n                  {chip}\n                </Badge>\n              );\n            })}\n          </div>\n        ),\n        search: {\n          id: searchId,\n          value: query,\n          onValueChange: onQueryChange,\n          debounceMs: 300,\n          placeholder: \"Search prompts…\",\n          \"aria-label\": \"Search prompts\",\n          variant: \"neo\",\n          round: true,\n        },\n        actions: (\n          <Button type=\"button\" variant=\"default\" onClick={onSave} disabled={disabled}>\n            Save\n          </Button>\n        ),\n      }}\n    />\n  );\n}\n\n","\"use client\";\n\nimport { usePromptLibrary } from \"./usePromptLibrary\";\n\nexport const CHAT_PROMPTS_STORAGE_KEY = \"prompts.chat.v1\" as const;\n\nexport function useChatPrompts() {\n  return usePromptLibrary(CHAT_PROMPTS_STORAGE_KEY);\n}\n","\"use client\";\n\nimport * as React from \"react\";\n\nimport { PromptsComposePanel } from \"./PromptsComposePanel\";\nimport { PromptList } from \"./PromptList\";\nimport type { PromptWithTitle } from \"./types\";\n\ninterface CodexPromptsTabProps {\n  title: string;\n  text: string;\n  onTitleChange: (value: string) => void;\n  onTextChange: (value: string) => void;\n  prompts: PromptWithTitle[];\n  query: string;\n}\n\nexport function CodexPromptsTab({\n  title,\n  text,\n  onTitleChange,\n  onTextChange,\n  prompts,\n  query,\n}: CodexPromptsTabProps) {\n  const composeHeadingId = React.useId();\n  const libraryHeadingId = React.useId();\n\n  return (\n    <div className=\"flex flex-col gap-[var(--space-6)]\">\n      <section\n        aria-labelledby={composeHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={composeHeadingId} className=\"type-title\">\n            Review checklist\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Capture Codex review prompts that help validate architecture,\n            testing, and release notes.\n          </p>\n        </div>\n        <PromptsComposePanel\n          title={title}\n          onTitleChange={onTitleChange}\n          text={text}\n          onTextChange={onTextChange}\n        />\n      </section>\n\n      <section\n        aria-labelledby={libraryHeadingId}\n        className=\"flex flex-col gap-[var(--space-3)]\"\n      >\n        <div className=\"space-y-[var(--space-1)]\">\n          <h3 id={libraryHeadingId} className=\"type-title\">\n            Codex prompts\n          </h3>\n          <p className=\"text-ui text-muted-foreground\">\n            Saved checklists appear here for quick reuse during reviews.\n          </p>\n        </div>\n        <PromptList prompts={prompts} query={query} />\n      </section>\n    </div>\n  );\n}\n","\"use client\";\n\nimport { usePromptLibrary } from \"./usePromptLibrary\";\n\nexport const CODEX_PROMPTS_STORAGE_KEY = \"prompts.codex.v1\" as const;\n\nexport function useCodexPrompts() {\n  return usePromptLibrary(CODEX_PROMPTS_STORAGE_KEY);\n}\n","\"use client\";\n\nimport * as React from \"react\";\nimport { Input, Textarea, Label } from \"@/components/ui\";\nimport { Check as CheckIcon } from \"lucide-react\";\n\ninterface PromptsComposePanelProps {\n  title: string;\n  onTitleChange: (value: string) => void;\n  text: string;\n  onTextChange: (value: string) => void;\n}\n\nexport function PromptsComposePanel({\n  title,\n  onTitleChange,\n  text,\n  onTextChange,\n}: PromptsComposePanelProps) {\n  const titleId = React.useId();\n  const textId = React.useId();\n  return (\n    <div className=\"space-y-[var(--space-3)]\">\n      <div>\n        <Label htmlFor={titleId}>Title</Label>\n        <Input\n          id={titleId}\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => onTitleChange(e.target.value)}\n          aria-describedby={`${titleId}-help`}\n        >\n          <CheckIcon\n            aria-hidden=\"true\"\n            className=\"absolute right-[var(--space-2)] top-1/2 -translate-y-1/2\"\n          />\n        </Input>\n        <p\n          id={`${titleId}-help`}\n          className=\"mt-[var(--space-1)] text-label text-muted-foreground\"\n        >\n          Add a short title\n        </p>\n      </div>\n      <div>\n        <Label htmlFor={textId}>Prompt</Label>\n        <Textarea\n          id={textId}\n          placeholder=\"Write your prompt or snippet…\"\n          value={text}\n          onChange={(e) => onTextChange(e.target.value)}\n          resize=\"resize-y\"\n        />\n      </div>\n    </div>\n  );\n}\n","\"use client\";\n\nimport * as React from \"react\";\n\nimport { Label, Textarea } from \"@/components/ui\";\n\ninterface NotesTabProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function NotesTab({ value, onChange }: NotesTabProps) {\n  const notesId = React.useId();\n\n  return (\n    <div className=\"w-full max-w-[calc(var(--space-8)*12)] space-y-[var(--space-3)]\">\n      <div className=\"space-y-[var(--space-2)]\">\n        <Label htmlFor={notesId}>Scratchpad</Label>\n        <Textarea\n          id={notesId}\n          value={value}\n          onChange={(event) => onChange(event.target.value)}\n          placeholder=\"Capture ideas, snippets, or follow-ups…\"\n          resize=\"resize-y\"\n          aria-describedby={`${notesId}-help`}\n        />\n        <p\n          id={`${notesId}-help`}\n          className=\"text-label text-muted-foreground\"\n        >\n          Notes auto-save locally and sync across refreshes.\n        </p>\n      </div>\n    </div>\n  );\n}\n"],"names":["BASE_TAB_ITEMS","key","label","PromptsPage","prompts","chatPrompts","query","chatQuery","setQuery","setChatQuery","filtered","chatFiltered","save","saveChatPrompt","useChatPrompts","codexPrompts","codexQuery","setCodexQuery","codexFiltered","saveCodexPrompt","useCodexPrompts","personas","usePersonas","notes","setNotes","useNotes","activeTab","setActiveTab","usePersistentState","TAB_STORAGE_KEY","chatTitleDraft","setChatTitleDraft","React","chatTextDraft","setChatTextDraft","codexTitleDraft","setCodexTitleDraft","codexTextDraft","setCodexTextDraft","handleChatSave","handleCodexSave","tabItems","map","item","badge","length","undefined","hasNotes","trim","activeQuery","handleQueryChange","value","handleSave","saveDisabled","activeCount","PageShell","as","className","PromptsHeader","id","count","onQueryChange","onSave","disabled","aria-labelledby","Tabs","onValueChange","idBase","TabList","items","ariaLabel","variant","showBaseline","TabPanel","ChatPromptsTab","title","text","onTitleChange","onTextChange","CodexPromptsTab","NotesTab","onChange","composeHeadingId","personasHeadingId","libraryHeadingId","div","section","h3","p","PromptsComposePanel","ul","li","Card","header","h4","persona","name","description","time","dateTime","Date","createdAt","toISOString","toLocaleString","LOCALE","prompt","PromptList","decodePrompts","Array","isArray","result","entry","decodePrompt","isRecord","Number","isFinite","push","usePromptLibrary","storageKey","setPrompts","decode","withTitles","derivePromptTitle","firstLine","split","find","line","fuseModulePromiseRef","fuseRef","setFiltered","ensureFuse","current","default","FuseModule","setCollection","instance","keys","threshold","trimmed","cancelled","lowered","toLowerCase","filter","includes","runSearch","fuse","results","search","res","titleDraft","textDraft","next","uid","now","prev","q","formattedPrompts","createdAtDateTime","createdAtLabel","Badge","size","tone","PROMPT_PERSONAS_STORAGE_KEY","chips","handleChip","chip","nextQuery","searchId","PageHeader","containerClassName","heading","sticky","right","span","aria-live","hero","topClassName","children","isSelected","interactive","selected","aria-pressed","onClick","debounceMs","placeholder","round","actions","Button","type","CHAT_PROMPTS_STORAGE_KEY","titleId","textId","Label","htmlFor","Input","e","target","aria-describedby","CheckIcon","aria-hidden","Textarea","resize","notesId","event"],"sourceRoot":"","ignoreList":[]}
{"version":3,"file":"static/chunks/9047.0dc5732b31608642.js","mappings":"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","sources":["webpack://_N_E/./src/lib/metrics/llmTokens.ts","webpack://_N_E/./src/ai/safety.ts","webpack://_N_E/./src/lib/assistant/plannerAgent.ts","webpack://_N_E/./src/lib/assistant/safe-mode.ts","webpack://_N_E/./src/lib/assistant/plannerAssistantAction.ts"],"sourcesContent":["export interface LlmAgentMetadata {\n  readonly id: string;\n  readonly label?: string;\n  readonly kind?: string;\n}\n\nexport interface LlmAgentUsage extends LlmAgentMetadata {\n  readonly tokens: number;\n  readonly share: number;\n}\n\nexport interface LlmTokenUsageSummary {\n  readonly totalTokens: number;\n  readonly agents: readonly LlmAgentUsage[];\n}\n\ntype UsageRecord = {\n  metadata: LlmAgentMetadata;\n  tokens: number;\n};\n\nconst usageStore = new Map<string, UsageRecord>();\n\nlet aggregateTokens = 0;\n\nfunction normalizeText(value: string | undefined): string | undefined {\n  if (typeof value !== \"string\") {\n    return undefined;\n  }\n\n  const trimmed = value.trim();\n  return trimmed.length > 0 ? trimmed : undefined;\n}\n\nfunction normalizeMetadata(metadata: LlmAgentMetadata): LlmAgentMetadata {\n  const normalizedId = normalizeText(metadata.id);\n  const normalizedLabel = normalizeText(metadata.label);\n  const normalizedKind = normalizeText(metadata.kind);\n\n  return {\n    id: normalizedId ?? \"\",\n    ...(normalizedLabel !== undefined ? { label: normalizedLabel } : {}),\n    ...(normalizedKind !== undefined ? { kind: normalizedKind } : {}),\n  } satisfies LlmAgentMetadata;\n}\n\nfunction mergeMetadata(\n  existing: LlmAgentMetadata | undefined,\n  incoming: LlmAgentMetadata,\n): LlmAgentMetadata {\n  return {\n    id: incoming.id,\n    ...(existing?.label ? { label: existing.label } : {}),\n    ...(existing?.kind ? { kind: existing.kind } : {}),\n    ...(incoming.label !== undefined ? { label: incoming.label } : {}),\n    ...(incoming.kind !== undefined ? { kind: incoming.kind } : {}),\n  } satisfies LlmAgentMetadata;\n}\n\nfunction normalizeTokenCount(value: number): number | null {\n  if (typeof value !== \"number\" || !Number.isFinite(value)) {\n    return null;\n  }\n\n  if (value < 0) {\n    return null;\n  }\n\n  const rounded = Math.round(value);\n  return rounded > 0 ? rounded : 0;\n}\n\nfunction deleteUsage(id: string, previousTokens: number): void {\n  usageStore.delete(id);\n  aggregateTokens -= previousTokens;\n\n  if (aggregateTokens < 0) {\n    aggregateTokens = 0;\n  }\n}\n\nexport function recordLlmTokenUsage(\n  metadata: LlmAgentMetadata,\n  tokens: number,\n): void {\n  const normalizedMetadata = normalizeMetadata(metadata);\n\n  if (normalizedMetadata.id.length === 0) {\n    return;\n  }\n\n  const normalizedTokens = normalizeTokenCount(tokens);\n\n  if (normalizedTokens === null) {\n    return;\n  }\n\n  const existing = usageStore.get(normalizedMetadata.id);\n  const previousTokens = existing?.tokens ?? 0;\n\n  if (normalizedTokens === 0) {\n    if (existing) {\n      deleteUsage(normalizedMetadata.id, previousTokens);\n    }\n    return;\n  }\n\n  const mergedMetadata = mergeMetadata(existing?.metadata, normalizedMetadata);\n\n  usageStore.set(normalizedMetadata.id, {\n    metadata: mergedMetadata,\n    tokens: normalizedTokens,\n  });\n\n  aggregateTokens += normalizedTokens - previousTokens;\n\n  if (aggregateTokens < 0) {\n    aggregateTokens = 0;\n  }\n}\n\nexport function getLlmTokenUsageSummary(): LlmTokenUsageSummary {\n  const safeTotal = aggregateTokens > 0 ? aggregateTokens : 0;\n\n  const agents = Array.from(usageStore.values())\n    .filter((record) => record.tokens > 0)\n    .map<LlmAgentUsage>((record) => {\n      const share = safeTotal === 0 ? 0 : record.tokens / safeTotal;\n\n      return {\n        ...record.metadata,\n        tokens: record.tokens,\n        share,\n      } satisfies LlmAgentUsage;\n    })\n    .sort((a, b) => {\n      if (b.tokens !== a.tokens) {\n        return b.tokens - a.tokens;\n      }\n\n      return a.id.localeCompare(b.id);\n    });\n\n  return {\n    totalTokens: safeTotal,\n    agents,\n  } satisfies LlmTokenUsageSummary;\n}\n\nexport function resetLlmTokenUsage(): void {\n  usageStore.clear();\n  aggregateTokens = 0;\n}\n","import { z } from \"zod\";\n\nimport { isSafeModeEnabled } from \"@/lib/features\";\nimport type { LlmAgentMetadata } from \"@/lib/metrics/llmTokens\";\nimport { recordLlmTokenUsage } from \"@/lib/metrics/llmTokens\";\nimport { sanitizeText } from \"@/lib/utils\";\n\nconst CONTROL_CHAR_PATTERN = /[\\u0000-\\u0008\\u000b\\u000c\\u000e-\\u001f\\u007f\\u2028\\u2029]/g;\nconst INVISIBLE_CHAR_PATTERN = /[\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u2069\\ufeff]/gi;\nconst COLLAPSE_SPACES_PATTERN = /[ \\t\\f\\v]+/g;\nconst FALLBACK_MAX_INPUT_LENGTH = 16_000;\nconst FALLBACK_TOKENS_PER_CHARACTER = 4;\nconst SAFE_MODE_TOKEN_CEILING_FALLBACK = 8_000;\n\nconst SAFE_MODE_RESPONSE_RESERVE = resolveNumericEnv(\n  \"SAFE_MODE_RESPONSE_RESERVE\",\n  512,\n  {\n    min: 0,\n    integer: true,\n  },\n);\nconst SAFE_MODE_TEMPERATURE_CEILING = resolveNumericEnv(\n  \"SAFE_MODE_TEMPERATURE_CEILING\",\n  0.4,\n  {\n    min: 0,\n  },\n);\nconst SAFE_MODE_MAX_TOOL_CALLS = resolveNumericEnv(\n  \"SAFE_MODE_MAX_TOOL_CALLS\",\n  1,\n  {\n    min: 0,\n    integer: true,\n  },\n);\n\nconst warnedMessages = new Set<string>();\n\ntype IssuePathSegment = string | number;\n\nfunction normalizeIssuePath(path: ReadonlyArray<PropertyKey>): IssuePathSegment[] {\n  const normalized: IssuePathSegment[] = [];\n\n  for (const segment of path) {\n    if (typeof segment === \"string\" || typeof segment === \"number\") {\n      normalized.push(segment);\n    } else {\n      normalized.push(segment.description ?? segment.toString());\n    }\n  }\n\n  return normalized;\n}\n\nfunction normalizeIssueMessage(issue: z.ZodIssue): string {\n  if (\n    issue.code === z.ZodIssueCode.invalid_type &&\n    typeof issue.message === \"string\" &&\n    /received undefined$/u.test(issue.message)\n  ) {\n    return \"Required\";\n  }\n\n  return issue.message;\n}\n\nfunction warnOnce(key: string, message: string): void {\n  if (typeof console === \"undefined\") {\n    return;\n  }\n  if (warnedMessages.has(key)) {\n    return;\n  }\n  warnedMessages.add(key);\n  console.warn(message);\n}\n\nfunction reportTokenEstimateIssue(index: number, raw: unknown, reason: string): void {\n  const printable = typeof raw === \"number\" ? raw.toString() : JSON.stringify(raw);\n  const key = `estimate:${index}:${reason}`;\n  warnOnce(\n    key,\n    `[ai.safety] Token estimator produced ${reason} for message index ${index}; clamping \"${printable}\" to a safe integer budget.`,\n  );\n}\n\nfunction formatIssuePath(path: ReadonlyArray<IssuePathSegment>): string {\n  if (path.length === 0) {\n    return \"<root>\";\n  }\n  return path.reduce<string>((acc, segment) => {\n    if (typeof segment === \"number\") {\n      return `${acc}[${segment}]`;\n    }\n    return acc.length === 0 ? segment : `${acc}.${segment}`;\n  }, \"\");\n}\n\nfunction reportSchemaValidationFailure(label: string, error: unknown): void {\n  if (error instanceof z.ZodError) {\n    const summary = error.issues\n      .map((issue) => {\n        const path = normalizeIssuePath(issue.path);\n        const message = normalizeIssueMessage(issue);\n        return `${formatIssuePath(path)} → ${message}`;\n      })\n      .join(\"; \");\n    const key = `schema:${label}:${summary}`;\n    warnOnce(key, `[ai.safety] ${label} failed schema validation: ${summary}`);\n    return;\n  }\n\n  const description = error instanceof Error ? `${error.name}: ${error.message}` : String(error);\n  const key = `schema:${label}:${description}`;\n  warnOnce(key, `[ai.safety] ${label} validation threw: ${description}`);\n}\n\ntype SegmenterConstructor =\n  | (new (locale?: string, options?: Intl.SegmenterOptions) => Intl.Segmenter)\n  | undefined;\n\nlet cachedSegmenter: Intl.Segmenter | null | undefined;\n\nfunction getUnicodeSegments(input: string): string[] {\n  if (input.length === 0) {\n    return [];\n  }\n\n  if (cachedSegmenter === undefined) {\n    const intlApi =\n      typeof Intl !== \"undefined\"\n        ? (Intl as typeof Intl & { Segmenter?: typeof Intl.Segmenter })\n        : undefined;\n    const segmenterCtor: SegmenterConstructor = intlApi?.Segmenter;\n    cachedSegmenter =\n      typeof segmenterCtor === \"function\"\n        ? new segmenterCtor(undefined, { granularity: \"grapheme\" })\n        : null;\n  }\n\n  const segmenter = cachedSegmenter;\n\n  if (segmenter) {\n    return Array.from(segmenter.segment(input), (segment) => segment.segment);\n  }\n\n  return Array.from(input);\n}\n\nfunction unicodeLength(input: string): number {\n  return getUnicodeSegments(input).length;\n}\n\nfunction unicodeTruncate(input: string, maxLength: number): string {\n  if (maxLength <= 0) {\n    return \"\";\n  }\n\n  const segments = getUnicodeSegments(input);\n\n  if (segments.length <= maxLength) {\n    return input;\n  }\n\n  return segments.slice(0, maxLength).join(\"\");\n}\n\nconst ENABLED_FLAG_VALUES = new Set([\"1\", \"true\", \"on\", \"yes\"]);\n\ninterface NumericEnvOptions {\n  readonly min?: number;\n  readonly integer?: boolean;\n}\n\nfunction reportNumericEnvIssue(name: string, raw: string, reason: string): void {\n  const trimmed = raw.trim();\n  const key = `numeric:${name}:${reason}:${trimmed}`;\n  warnOnce(key, `[ai.safety] Ignoring ${name} value \"${trimmed}\" (${reason}).`);\n}\n\nfunction resolveNumericEnv(\n  names: string | readonly string[],\n  fallback: number,\n  options: NumericEnvOptions = {},\n): number {\n  if (typeof process === \"undefined\") {\n    return fallback;\n  }\n\n  const candidates = Array.isArray(names) ? names : [names];\n\n  for (const name of candidates) {\n    const raw = process.env[name];\n\n    if (typeof raw !== \"string\") {\n      continue;\n    }\n\n    const normalized = raw.trim();\n\n    if (normalized.length === 0) {\n      reportNumericEnvIssue(name, raw, \"empty string\");\n      continue;\n    }\n\n    const parsed = Number(normalized);\n\n    if (!Number.isFinite(parsed)) {\n      reportNumericEnvIssue(name, raw, \"non-numeric value\");\n      continue;\n    }\n\n    const value = options.integer ? Math.trunc(parsed) : parsed;\n\n    if (Number.isNaN(value)) {\n      reportNumericEnvIssue(name, raw, \"not a number\");\n      continue;\n    }\n\n    if (options.min !== undefined && value < options.min) {\n      reportNumericEnvIssue(name, raw, `below minimum ${options.min}`);\n      continue;\n    }\n\n    return value;\n  }\n\n  return fallback;\n}\n\nfunction getDefaultMaxInputLength(): number {\n  return resolveNumericEnv(\n    \"AI_MAX_INPUT_LENGTH\",\n    FALLBACK_MAX_INPUT_LENGTH,\n    {\n      min: 1,\n      integer: true,\n    },\n  );\n}\n\nfunction getDefaultTokensPerCharacter(): number {\n  return resolveNumericEnv(\n    [\"AI_TOKENS_PER_CHAR\", \"AI_TOKENS_PER_CHARACTER\"],\n    FALLBACK_TOKENS_PER_CHARACTER,\n    {\n      min: Number.EPSILON,\n    },\n  );\n}\n\nfunction getSafeModeTokenCeiling(): number {\n  return resolveNumericEnv(\n    \"SAFE_MODE_TOKEN_CEILING\",\n    SAFE_MODE_TOKEN_CEILING_FALLBACK,\n    {\n      min: 1,\n      integer: true,\n    },\n  );\n}\n\nfunction isServerSafeModeExplicitlyEnabled(): boolean {\n  if (typeof process === \"undefined\") {\n    return false;\n  }\n\n  const raw = process.env.SAFE_MODE;\n\n  if (typeof raw !== \"string\") {\n    return false;\n  }\n\n  const normalized = raw.trim().toLowerCase();\n\n  if (normalized.length === 0) {\n    return false;\n  }\n\n  return ENABLED_FLAG_VALUES.has(normalized);\n}\n\nexport interface SanitizedInputOptions {\n  readonly maxLength?: number;\n  readonly allowMarkup?: boolean;\n}\n\nexport function sanitizePrompt(\n  raw: string,\n  options: SanitizedInputOptions = {},\n): string {\n  const { maxLength = getDefaultMaxInputLength(), allowMarkup = false } = options;\n  const resolvedMaxLength = Number.isFinite(maxLength)\n    ? Math.max(Math.trunc(maxLength), 0)\n    : getDefaultMaxInputLength();\n  const normalized = raw\n    .replace(/\\r\\n?/g, \"\\n\")\n    .replace(CONTROL_CHAR_PATTERN, \"\")\n    .replace(INVISIBLE_CHAR_PATTERN, \"\")\n    .replace(/\\n{3,}/g, \"\\n\\n\")\n    .split(\"\\n\")\n    .map((line) => line.replace(COLLAPSE_SPACES_PATTERN, \" \").trimEnd())\n    .join(\"\\n\")\n    .trim();\n\n  const truncated =\n    resolvedMaxLength === 0 ? \"\" : unicodeTruncate(normalized, resolvedMaxLength);\n\n  return allowMarkup ? truncated : sanitizeText(truncated);\n}\n\nexport const sanitizePromptInput = sanitizePrompt;\n\nexport interface TokenBudgetContent {\n  readonly content: string;\n  readonly pinned?: boolean;\n}\n\nexport interface TokenBudgetOptions {\n  readonly maxTokens: number;\n  readonly reservedForResponse?: number;\n  readonly estimateTokens?: (content: string) => number;\n  readonly agent?: LlmAgentMetadata;\n}\n\nexport interface TokenBudgetResult<T extends TokenBudgetContent> {\n  readonly messages: readonly T[];\n  readonly removedCount: number;\n  readonly totalTokens: number;\n  readonly availableTokens: number;\n}\n\nfunction defaultTokenEstimator(content: string): number {\n  const tokensPerCharacter = getDefaultTokensPerCharacter();\n  const characterCount = unicodeLength(content);\n  if (characterCount === 0) {\n    return 0;\n  }\n  return Math.ceil(characterCount / tokensPerCharacter);\n}\n\nfunction normalizeTokenEstimate(raw: number, index: number): number {\n  if (!Number.isFinite(raw)) {\n    reportTokenEstimateIssue(index, raw, \"a non-finite value\");\n    return 0;\n  }\n\n  if (raw < 0) {\n    reportTokenEstimateIssue(index, raw, \"a negative value\");\n    return 0;\n  }\n\n  if (!Number.isInteger(raw)) {\n    reportTokenEstimateIssue(index, raw, \"a fractional value\");\n  }\n\n  return Math.ceil(raw);\n}\n\nfunction enforceTokenBudgetInternal<T extends TokenBudgetContent>(\n  messages: readonly T[],\n  options: TokenBudgetOptions,\n): TokenBudgetResult<T> {\n  const estimator = options.estimateTokens ?? defaultTokenEstimator;\n  const incomingReserved = options.reservedForResponse ?? 0;\n  const reserved = Number.isFinite(incomingReserved)\n    ? Math.max(Math.floor(incomingReserved), 0)\n    : 0;\n  const clientSafeMode = isSafeModeEnabled();\n  const serverSafeMode = isServerSafeModeExplicitlyEnabled();\n  const safeMode = clientSafeMode && serverSafeMode;\n  const safeReserved = safeMode\n    ? Math.max(reserved, SAFE_MODE_RESPONSE_RESERVE)\n    : reserved;\n  const incomingMaxTokens = Number.isFinite(options.maxTokens)\n    ? Math.max(Math.floor(options.maxTokens), 0)\n    : 0;\n  const safeMaxTokens = safeMode\n    ? Math.min(incomingMaxTokens, getSafeModeTokenCeiling())\n    : incomingMaxTokens;\n  const availableTokens = Math.max(safeMaxTokens - safeReserved, 0);\n\n  const kept: T[] = [];\n  let used = 0;\n  let removed = 0;\n\n  for (let index = messages.length - 1; index >= 0; index -= 1) {\n    const message = messages[index]!;\n    const estimate = estimator(message.content);\n    const tokens = normalizeTokenEstimate(estimate, index);\n    if (message.pinned) {\n      kept.push(message);\n      used += tokens;\n      continue;\n    }\n    if (used + tokens > availableTokens) {\n      removed += 1;\n      continue;\n    }\n    kept.push(message);\n    used += tokens;\n  }\n\n  kept.reverse();\n\n  const result: TokenBudgetResult<T> = {\n    messages: kept,\n    removedCount: removed,\n    totalTokens: used,\n    availableTokens,\n  };\n\n  if (options.agent) {\n    recordLlmTokenUsage(options.agent, result.totalTokens);\n  }\n\n  return result;\n}\n\nexport interface TokenCapResult {\n  readonly content: string | null;\n  readonly removed: boolean;\n  readonly totalTokens: number;\n  readonly availableTokens: number;\n}\n\nexport function capTokens(\n  content: string,\n  options: TokenBudgetOptions & { pinned?: boolean },\n): TokenCapResult;\nexport function capTokens<T extends TokenBudgetContent>(\n  messages: readonly T[],\n  options: TokenBudgetOptions,\n): TokenBudgetResult<T>;\nexport function capTokens<T extends TokenBudgetContent>(\n  input: string | readonly T[],\n  options: TokenBudgetOptions & { pinned?: boolean },\n): TokenBudgetResult<T> | TokenCapResult {\n  if (typeof input === \"string\") {\n    const { pinned, ...restOptions } = options as TokenBudgetOptions & { pinned?: boolean };\n    const result = enforceTokenBudgetInternal(\n      [\n        {\n          content: input,\n          pinned,\n        },\n      ],\n      restOptions,\n    );\n    const kept = result.messages[0];\n    return {\n      content: kept?.content ?? null,\n      removed: kept === undefined,\n      totalTokens: result.totalTokens,\n      availableTokens: result.availableTokens,\n    };\n  }\n\n  return enforceTokenBudgetInternal(input, options as TokenBudgetOptions);\n}\n\nexport function enforceTokenBudget<T extends TokenBudgetContent>(\n  messages: readonly T[],\n  options: TokenBudgetOptions,\n): TokenBudgetResult<T> {\n  return capTokens(messages, options);\n}\n\nexport interface SchemaValidationIssue {\n  readonly path: ReadonlyArray<string | number>;\n  readonly pathText: string;\n  readonly message: string;\n  readonly code?: string;\n}\n\nexport interface SchemaValidationFailure {\n  readonly label: string;\n  readonly issues: readonly SchemaValidationIssue[];\n  readonly cause?: unknown;\n}\n\nexport interface SchemaValidationOptions {\n  readonly label?: string;\n}\n\nexport interface SchemaValidationSuccess<T> {\n  readonly success: true;\n  readonly data: T;\n}\n\nexport interface SchemaValidationErrorResult {\n  readonly success: false;\n  readonly error: SchemaValidationFailure;\n}\n\nexport type SchemaValidationResult<T> =\n  | SchemaValidationSuccess<T>\n  | SchemaValidationErrorResult;\n\nexport function guardResponse<T>(\n  value: unknown,\n  schema: z.ZodType<T>,\n  options: SchemaValidationOptions = {},\n): SchemaValidationResult<T> {\n  const { label = \"AI response\" } = options;\n  try {\n    const parsed = schema.parse(value);\n    return {\n      success: true,\n      data: parsed,\n    };\n  } catch (error) {\n    reportSchemaValidationFailure(label, error);\n    if (error instanceof z.ZodError) {\n      const issues = error.issues.map<SchemaValidationIssue>((issue: z.ZodIssue) => {\n        const path = normalizeIssuePath(issue.path);\n        return {\n          path,\n          pathText: formatIssuePath(path),\n          message: normalizeIssueMessage(issue),\n          code: issue.code,\n        } satisfies SchemaValidationIssue;\n      });\n\n      return {\n        success: false,\n        error: {\n          label,\n          issues,\n          cause: error,\n        },\n      };\n    }\n\n    const message =\n      error instanceof Error ? error.message : \"Unexpected validation error\";\n\n    return {\n      success: false,\n      error: {\n        label,\n        issues: [\n          {\n            path: [],\n            pathText: formatIssuePath([]),\n            message,\n          },\n        ],\n        cause: error,\n      },\n    };\n  }\n}\n\nexport const validateSchema = guardResponse;\n\nexport interface StopSequenceOptions {\n  readonly stopSequences?: readonly string[];\n  readonly safeModeStopSequences?: readonly string[];\n}\n\nexport function withStopSequences<T extends { stopSequences?: readonly string[] }>(\n  payload: T,\n  options: StopSequenceOptions = {},\n): T & { stopSequences?: readonly string[] } {\n  const baseSequences = options.stopSequences ?? payload.stopSequences ?? [];\n  const safeModeSequences = options.safeModeStopSequences ?? baseSequences;\n  const targetSequences = isSafeModeEnabled() ? safeModeSequences : baseSequences;\n  const normalized = Array.from(\n    new Set(\n      targetSequences.filter(\n        (sequence): sequence is string =>\n          typeof sequence === \"string\" && sequence.trim().length > 0,\n      ),\n    ),\n  );\n\n  if (normalized.length === 0) {\n    const clone = { ...payload } as T & { stopSequences?: readonly string[] };\n    if (payload.stopSequences !== undefined || options.stopSequences !== undefined) {\n      clone.stopSequences = [];\n    } else {\n      delete clone.stopSequences;\n    }\n    return clone;\n  }\n\n  return {\n    ...payload,\n    stopSequences: normalized,\n  };\n}\n\nexport interface RetryOptions {\n  readonly maxAttempts?: number;\n  readonly initialDelayMs?: number;\n  readonly maxDelayMs?: number;\n  readonly jitterRatio?: number;\n  readonly signal?: AbortSignal;\n  readonly onRetry?: (context: {\n    readonly attempt: number;\n    readonly delayMs: number;\n    readonly error: unknown;\n  }) => void;\n}\n\nconst DEFAULT_MAX_ATTEMPTS = 3;\nconst DEFAULT_INITIAL_DELAY_MS = 250;\nconst DEFAULT_MAX_DELAY_MS = 4_000;\nconst DEFAULT_JITTER_RATIO = 0.25;\n\nfunction sleep(delayMs: number, signal?: AbortSignal): Promise<void> {\n  if (delayMs <= 0) return Promise.resolve();\n  return new Promise<void>((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      cleanup();\n      resolve();\n    }, delayMs);\n\n    const cleanup = () => {\n      clearTimeout(timeout);\n      signal?.removeEventListener(\"abort\", handleAbort);\n    };\n\n    const handleAbort = () => {\n      cleanup();\n      reject(signal?.reason instanceof Error ? signal.reason : new Error(\"Aborted\"));\n    };\n\n    if (signal) {\n      if (signal.aborted) {\n        cleanup();\n        reject(signal.reason instanceof Error ? signal.reason : new Error(\"Aborted\"));\n        return;\n      }\n      signal.addEventListener(\"abort\", handleAbort);\n    }\n  });\n}\n\nexport async function retryWithJitter<T>(\n  operation: (context: { readonly attempt: number; readonly signal: AbortSignal }) => Promise<T>,\n  options: RetryOptions = {},\n): Promise<T> {\n  const {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS,\n    initialDelayMs = DEFAULT_INITIAL_DELAY_MS,\n    maxDelayMs = DEFAULT_MAX_DELAY_MS,\n    jitterRatio = DEFAULT_JITTER_RATIO,\n    signal,\n    onRetry,\n  } = options;\n\n  let attempt = 0;\n  let delayMs = initialDelayMs;\n  const retryController = new AbortController();\n  const unlinkAbortSignals = signal\n    ? linkAbortSignals(retryController, signal)\n    : undefined;\n  const linkedSignal = retryController.signal;\n\n  try {\n    while (attempt < maxAttempts) {\n      attempt += 1;\n      try {\n        return await operation({ attempt, signal: linkedSignal });\n      } catch (error) {\n        if (linkedSignal.aborted) {\n          throw linkedSignal.reason ?? error;\n        }\n        if (attempt >= maxAttempts) {\n          throw error;\n        }\n        const jitter = 1 + (Math.random() * 2 - 1) * jitterRatio;\n        const nextDelay = Math.min(maxDelayMs, delayMs * jitter);\n        onRetry?.({ attempt, delayMs: nextDelay, error });\n        await sleep(nextDelay, linkedSignal);\n        delayMs = Math.min(maxDelayMs, nextDelay * 2);\n      }\n    }\n  } finally {\n    unlinkAbortSignals?.();\n  }\n\n  throw new Error(\"retryWithJitter exhausted all attempts without resolving\");\n}\n\nexport type ToolChoiceMode = \"auto\" | \"none\" | \"required\";\n\nexport interface ToolChoiceConfig {\n  readonly mode: ToolChoiceMode;\n  readonly maxToolCalls?: number;\n}\n\nexport interface ModelSafetyConfig {\n  readonly temperature?: number;\n  readonly topP?: number;\n  readonly toolChoice?: ToolChoiceConfig;\n}\n\nexport interface ModelSafetyResult extends ModelSafetyConfig {\n  readonly temperature: number;\n  readonly toolChoice: ToolChoiceConfig;\n  readonly safeMode: boolean;\n}\n\nconst DEFAULT_TEMPERATURE = 0.7;\nconst MIN_TEMPERATURE = 0;\nconst MAX_TEMPERATURE = 2;\nconst MIN_TOP_P = Number.EPSILON;\nconst MAX_TOP_P = 1;\n\nfunction normalizeTemperature(value: number | undefined): number {\n  if (typeof value !== \"number\" || !Number.isFinite(value)) {\n    return DEFAULT_TEMPERATURE;\n  }\n\n  const clamped = Math.min(Math.max(value, MIN_TEMPERATURE), MAX_TEMPERATURE);\n  return Number.isNaN(clamped) ? DEFAULT_TEMPERATURE : clamped;\n}\n\nfunction normalizeTopP(value: number | undefined): number | undefined {\n  if (typeof value !== \"number\" || !Number.isFinite(value)) {\n    return undefined;\n  }\n\n  const clamped = Math.min(Math.max(value, MIN_TOP_P), MAX_TOP_P);\n  return Number.isNaN(clamped) ? undefined : clamped;\n}\n\nfunction normalizeMaxToolCalls(value: number | undefined): number | undefined {\n  if (typeof value !== \"number\" || !Number.isFinite(value)) {\n    return undefined;\n  }\n\n  const rounded = Math.max(0, Math.trunc(value));\n  return Number.isNaN(rounded) ? undefined : rounded;\n}\n\nfunction normalizeToolChoice(value: ToolChoiceConfig | undefined): ToolChoiceConfig {\n  const normalizedMode =\n    value?.mode === \"auto\" || value?.mode === \"none\" || value?.mode === \"required\"\n      ? value.mode\n      : \"auto\";\n  const normalizedMax = normalizeMaxToolCalls(value?.maxToolCalls);\n\n  return {\n    mode: normalizedMode,\n    ...(normalizedMax !== undefined ? { maxToolCalls: normalizedMax } : {}),\n  } satisfies ToolChoiceConfig;\n}\n\nexport function applyModelSafety(config: ModelSafetyConfig = {}): ModelSafetyResult {\n  const safeMode = isSafeModeEnabled();\n  const temperature = normalizeTemperature(config.temperature);\n  const topP = normalizeTopP(config.topP);\n  const toolChoiceConfig = normalizeToolChoice(config.toolChoice);\n\n  const safeTemperature = safeMode\n    ? Math.min(temperature, SAFE_MODE_TEMPERATURE_CEILING)\n    : temperature;\n\n  const safeToolMax = safeMode\n    ? Math.min(\n        toolChoiceConfig.maxToolCalls ?? SAFE_MODE_MAX_TOOL_CALLS,\n        SAFE_MODE_MAX_TOOL_CALLS,\n      )\n    : toolChoiceConfig.maxToolCalls;\n\n  const toolChoice: ToolChoiceConfig = safeMode\n    ? {\n        mode: toolChoiceConfig.mode === \"none\" ? \"none\" : \"auto\",\n        ...(safeToolMax !== undefined ? { maxToolCalls: safeToolMax } : {}),\n      }\n    : {\n        mode: toolChoiceConfig.mode,\n        ...(safeToolMax !== undefined ? { maxToolCalls: safeToolMax } : {}),\n      };\n\n  return {\n    temperature: safeTemperature,\n    ...(topP !== undefined ? { topP } : {}),\n    toolChoice,\n    safeMode,\n  } satisfies ModelSafetyResult;\n}\n\nexport interface StreamingAbortController {\n  readonly signal: AbortSignal;\n  abort(reason?: unknown): void;\n  onAbort(listener: (reason: unknown) => void): () => void;\n  throwIfAborted(): void;\n}\n\nexport function createStreamingAbortController(\n  parentSignal?: AbortSignal,\n): StreamingAbortController {\n  const controller = new AbortController();\n  const listeners = new Set<(reason: unknown) => void>();\n\n  const notify = () => {\n    const reason = controller.signal.reason;\n    for (const listener of Array.from(listeners)) {\n      listener(reason);\n    }\n    listeners.clear();\n  };\n\n  controller.signal.addEventListener(\"abort\", notify, { once: true });\n\n  if (parentSignal) {\n    if (parentSignal.aborted) {\n      controller.abort(parentSignal.reason);\n    } else {\n      const handleParentAbort = () => {\n        controller.abort(parentSignal.reason);\n      };\n      parentSignal.addEventListener(\"abort\", handleParentAbort, { once: true });\n      controller.signal.addEventListener(\n        \"abort\",\n        () => parentSignal.removeEventListener(\"abort\", handleParentAbort),\n        { once: true },\n      );\n    }\n  }\n\n  return {\n    signal: controller.signal,\n    abort(reason?: unknown) {\n      if (!controller.signal.aborted) {\n        controller.abort(reason ?? new Error(\"Stream aborted\"));\n      }\n    },\n    onAbort(listener: (reason: unknown) => void) {\n      listeners.add(listener);\n      if (controller.signal.aborted) {\n        listener(controller.signal.reason);\n        listeners.delete(listener);\n        return () => undefined;\n      }\n      return () => {\n        listeners.delete(listener);\n      };\n    },\n    throwIfAborted() {\n      if (controller.signal.aborted) {\n        throw controller.signal.reason ?? new Error(\"Stream aborted\");\n      }\n    },\n  };\n}\n\nexport function linkAbortSignals(target: AbortController, ...sources: AbortSignal[]): () => void {\n  const removers: Array<() => void> = [];\n\n  for (const signal of sources) {\n    if (signal.aborted) {\n      target.abort(signal.reason);\n      continue;\n    }\n\n    const propagateAbort = () => {\n      target.abort(signal.reason);\n    };\n\n    const handleTargetAbort = () => {\n      signal.removeEventListener(\"abort\", propagateAbort);\n      target.signal.removeEventListener(\"abort\", handleTargetAbort);\n    };\n\n    signal.addEventListener(\"abort\", propagateAbort, { once: true });\n    target.signal.addEventListener(\"abort\", handleTargetAbort, { once: true });\n\n    removers.push(() => {\n      signal.removeEventListener(\"abort\", propagateAbort);\n      target.signal.removeEventListener(\"abort\", handleTargetAbort);\n    });\n  }\n\n  return () => {\n    for (const remove of removers) {\n      remove();\n    }\n  };\n}\n","import { z } from \"zod\";\n\nimport {\n  applyModelSafety,\n  enforceTokenBudget,\n  guardResponse,\n  sanitizePrompt,\n  type TokenBudgetContent,\n} from \"@/ai/safety\";\nimport type { ISODate } from \"@/components/planner\";\nimport {\n  parsePlannerPhrase,\n  summariseParse,\n  type PlannerParseConfidence,\n} from \"@/lib/scheduling\";\nimport { type LlmAgentMetadata } from \"@/lib/metrics/llmTokens\";\n\nconst SYSTEM_PROMPT = [\n  \"You are Planner, an assistant that helps people organise projects and daily tasks.\",\n  \"Extract actionable planner suggestions from the user's description and keep responses concise.\",\n  \"Prioritise clear wording and surface any detected dates, times, or recurring patterns.\",\n].join(\"\\n\");\n\nconst DEFAULT_MAX_TOKENS = 4_000;\nconst DEFAULT_RESPONSE_RESERVE = 512;\nconst SAFE_MODE_SUGGESTION_LIMIT = 3;\nconst DEFAULT_SUGGESTION_LIMIT = 5;\n\nconst ENABLED_FLAG_VALUES = new Set([\"1\", \"true\", \"on\", \"yes\"]);\n\nconst AGENT_METADATA: LlmAgentMetadata = {\n  id: \"planner.assistant\",\n  label: \"Planner Assistant\",\n  kind: \"planner\",\n};\n\nconst plannerAssistantSuggestionSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  intent: z.union([z.literal(\"task\"), z.literal(\"project\")]),\n  confidence: z.union([\n    z.literal(\"none\"),\n    z.literal(\"low\"),\n    z.literal(\"medium\"),\n    z.literal(\"high\"),\n  ]),\n  summary: z.string().nullable(),\n  schedule: z\n    .object({\n      date: z.string().optional(),\n      time: z.string().optional(),\n    })\n    .optional(),\n});\n\nconst plannerAssistantPlanSchema = z.object({\n  sanitizedPrompt: z.string(),\n  prompt: z.string(),\n  summary: z.string().nullable(),\n  suggestions: z.array(plannerAssistantSuggestionSchema),\n  safety: z.object({\n    safeMode: z.boolean(),\n    temperature: z.number(),\n    toolChoice: z.object({\n      mode: z.union([z.literal(\"auto\"), z.literal(\"none\"), z.literal(\"required\")]),\n      maxToolCalls: z.number().int().nonnegative().optional(),\n    }),\n    topP: z.number().optional(),\n  }),\n  tokenBudget: z.object({\n    totalTokens: z.number().int().nonnegative(),\n    availableTokens: z.number().int().nonnegative(),\n    removedCount: z.number().int().nonnegative(),\n  }),\n});\n\nexport type PlannerAssistantSuggestion = z.infer<\n  typeof plannerAssistantSuggestionSchema\n>;\nexport type PlannerAssistantPlan = z.infer<typeof plannerAssistantPlanSchema>;\n\nexport const plannerAssistantSuggestionValidator =\n  plannerAssistantSuggestionSchema;\nexport const plannerAssistantPlanValidator = plannerAssistantPlanSchema;\n\ntype PlannerAgentMessage = TokenBudgetContent & { role: \"system\" | \"user\" };\n\ntype PlannerAssistantIntent = \"task\" | \"project\";\n\nexport type PlannerAssistantOptions = {\n  readonly prompt: string;\n  readonly now?: Date;\n  readonly maxTokens?: number;\n  readonly reservedForResponse?: number;\n  readonly suggestionLimit?: number;\n};\n\nexport type PlannerAssistantErrorCode =\n  | \"empty_prompt\"\n  | \"budget_exhausted\"\n  | \"invalid_plan\";\n\nexport class PlannerAssistantError extends Error {\n  readonly code: PlannerAssistantErrorCode;\n\n  constructor(code: PlannerAssistantErrorCode, message: string) {\n    super(message);\n    this.code = code;\n    this.name = \"PlannerAssistantError\";\n  }\n}\n\nfunction isSafeModeFlagEnabled(value: string | undefined): boolean {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const normalized = value.trim().toLowerCase();\n  if (!normalized) {\n    return false;\n  }\n\n  return ENABLED_FLAG_VALUES.has(normalized);\n}\n\nfunction createMessages(prompt: string): PlannerAgentMessage[] {\n  return [\n    {\n      role: \"system\",\n      content: SYSTEM_PROMPT,\n      pinned: true,\n    },\n    {\n      role: \"user\",\n      content: prompt,\n    },\n  ];\n}\n\nfunction extractUserPrompt(messages: readonly PlannerAgentMessage[]): string {\n  const userMessage = [...messages]\n    .reverse()\n    .find((message) => message.role === \"user\" && message.content.trim().length > 0);\n\n  return userMessage ? userMessage.content.trim() : \"\";\n}\n\nfunction splitSegments(input: string): string[] {\n  const trimmed = input.trim();\n  if (!trimmed) {\n    return [];\n  }\n\n  const segments = new Set<string>();\n  segments.add(trimmed);\n\n  const candidateLines = trimmed\n    .split(/\\n+/)\n    .map((line) => line.replace(/^[-*•\\u2022]\\s*/, \"\").trim())\n    .filter((line) => line.length > 0);\n\n  for (const line of candidateLines) {\n    segments.add(line);\n  }\n\n  return Array.from(segments);\n}\n\nfunction toSuggestionId(index: number, title: string): string {\n  const normalized = title\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, \"-\")\n    .replace(/^-+|-+$/g, \"\");\n  if (!normalized) {\n    return `${index}`;\n  }\n  return `${index}-${normalized}`;\n}\n\nfunction toSchedule(\n  date?: ISODate,\n  time?: string,\n): PlannerAssistantSuggestion[\"schedule\"] {\n  if (!date && !time) {\n    return undefined;\n  }\n\n  return {\n    ...(date ? { date } : {}),\n    ...(time ? { time } : {}),\n  };\n}\n\nfunction synthesiseSuggestion(\n  text: string,\n  now: Date,\n  index: number,\n): PlannerAssistantSuggestion {\n  const parsed = parsePlannerPhrase(text, { now });\n  const title = parsed.event.title.trim() || text;\n  const summary = summariseParse(parsed);\n  const schedule = toSchedule(parsed.event.startDate, parsed.event.time);\n\n  return {\n    id: toSuggestionId(index, `${title}-${schedule?.date ?? \"\"}-${schedule?.time ?? \"\"}`),\n    title,\n    intent: parsed.intent as PlannerAssistantIntent,\n    confidence: parsed.confidence,\n    summary: summary.length > 0 ? summary : null,\n    ...(schedule ? { schedule } : {}),\n  } satisfies PlannerAssistantSuggestion;\n}\n\nfunction deduplicateSuggestions(\n  suggestions: PlannerAssistantSuggestion[],\n): PlannerAssistantSuggestion[] {\n  const seen = new Set<string>();\n  const result: PlannerAssistantSuggestion[] = [];\n\n  for (const suggestion of suggestions) {\n    const key = [\n      suggestion.intent,\n      suggestion.title.toLowerCase(),\n      suggestion.schedule?.date ?? \"\",\n      suggestion.schedule?.time ?? \"\",\n    ].join(\"|\");\n\n    if (seen.has(key)) {\n      continue;\n    }\n\n    seen.add(key);\n    result.push(suggestion);\n  }\n\n  return result;\n}\n\nexport function planWithAssistant(\n  options: PlannerAssistantOptions,\n): PlannerAssistantPlan {\n  const sanitizedPrompt = sanitizePrompt(options.prompt);\n  if (!sanitizedPrompt) {\n    throw new PlannerAssistantError(\n      \"empty_prompt\",\n      \"The planner assistant requires a non-empty prompt.\",\n    );\n  }\n\n  const safety = applyModelSafety();\n  const safeModeEnabled =\n    safety.safeMode && isSafeModeFlagEnabled(process.env.SAFE_MODE);\n\n  const messages = createMessages(sanitizedPrompt);\n  const budget = enforceTokenBudget(messages, {\n    maxTokens: options.maxTokens ?? DEFAULT_MAX_TOKENS,\n    reservedForResponse: options.reservedForResponse ?? DEFAULT_RESPONSE_RESERVE,\n    agent: AGENT_METADATA,\n  });\n\n  const finalPrompt = extractUserPrompt(budget.messages);\n  if (!finalPrompt) {\n    throw new PlannerAssistantError(\n      \"budget_exhausted\",\n      \"The planner assistant could not keep the user's prompt within the token budget.\",\n    );\n  }\n\n  const segments = splitSegments(finalPrompt);\n  const now = options.now ?? new Date();\n  const requestedLimit =\n    options.suggestionLimit ??\n    (safeModeEnabled ? SAFE_MODE_SUGGESTION_LIMIT : DEFAULT_SUGGESTION_LIMIT);\n\n  const limit = Math.max(\n    1,\n    safeModeEnabled\n      ? Math.min(requestedLimit, SAFE_MODE_SUGGESTION_LIMIT)\n      : requestedLimit,\n  );\n\n  const rawSuggestions = segments\n    .slice(0, limit * 2)\n    .map((segment, index) => synthesiseSuggestion(segment, now, index));\n  const suggestions = deduplicateSuggestions(rawSuggestions).slice(0, limit);\n\n  if (!suggestions.length) {\n    suggestions.push(\n      {\n        id: toSuggestionId(0, finalPrompt),\n        title: finalPrompt,\n        intent: \"task\",\n        confidence: \"none\" satisfies PlannerParseConfidence,\n        summary: null,\n      },\n    );\n  }\n\n  const summary = suggestions[0]?.summary ?? null;\n  const prompt = [SYSTEM_PROMPT, \"\", finalPrompt].join(\"\\n\");\n\n  const plan = {\n    sanitizedPrompt,\n    prompt,\n    summary,\n    suggestions,\n    safety: {\n      ...safety,\n      safeMode: safeModeEnabled,\n    },\n    tokenBudget: {\n      totalTokens: budget.totalTokens,\n      availableTokens: budget.availableTokens,\n      removedCount: budget.removedCount,\n    },\n  } satisfies PlannerAssistantPlan;\n\n  const validation = guardResponse(plan, plannerAssistantPlanSchema, {\n    label: \"planner assistant plan\",\n  });\n\n  if (!validation.success) {\n    throw new PlannerAssistantError(\n      \"invalid_plan\",\n      \"Planner assistant produced an invalid plan.\",\n    );\n  }\n\n  return validation.data;\n}\n","import { SAFE_MODE_FALLBACK } from '@env'\n\nconst ENABLED_FLAG_VALUES = new Set(['1', 'true', 'on', 'yes'])\nconst DISABLED_FLAG_VALUES = new Set(['0', 'false', 'off', 'no'])\n\nfunction normalizeFlag(value: string | undefined | null): boolean | null {\n  if (typeof value !== 'string') {\n    return null\n  }\n\n  const normalized = value.trim().toLowerCase()\n  if (!normalized) {\n    return null\n  }\n\n  if (ENABLED_FLAG_VALUES.has(normalized)) {\n    return true\n  }\n\n  if (DISABLED_FLAG_VALUES.has(normalized)) {\n    return false\n  }\n\n  return null\n}\n\nfunction resolveFlag(\n  primary: string | undefined,\n  secondary: string | undefined,\n): boolean {\n  return (\n    normalizeFlag(primary) ??\n    normalizeFlag(secondary) ??\n    normalizeFlag(SAFE_MODE_FALLBACK) ??\n    false\n  )\n}\n\nexport type PlannerAssistantSafeModeState = {\n  readonly server: boolean\n  readonly client: boolean\n  readonly active: boolean\n}\n\ntype PlannerAssistantSafeModeEnv = {\n  readonly SAFE_MODE?: string\n  readonly NEXT_PUBLIC_SAFE_MODE?: string\n  readonly [key: string]: string | undefined\n}\n\nexport function resolvePlannerAssistantSafeMode(\n  env: PlannerAssistantSafeModeEnv = process.env,\n): PlannerAssistantSafeModeState {\n  const server = resolveFlag(env.SAFE_MODE, env.NEXT_PUBLIC_SAFE_MODE)\n  const client = resolveFlag(env.NEXT_PUBLIC_SAFE_MODE, env.SAFE_MODE)\n\n  return {\n    server,\n    client,\n    active: server && client,\n  }\n}\n","import { z } from 'zod'\n\nimport { fromISODate } from '@/lib/date'\nimport {\n  PlannerAssistantError,\n  plannerAssistantPlanValidator,\n  planWithAssistant,\n} from '@/lib/assistant/plannerAgent'\nimport {\n  resolvePlannerAssistantSafeMode,\n  type PlannerAssistantSafeModeState,\n} from '@/lib/assistant/safe-mode'\n\nexport const plannerAssistantRequestSchema = z.object({\n  prompt: z.string(),\n  focusDate: z.string().optional(),\n  suggestionLimit: z.number().int().positive().max(10).optional(),\n})\n\nexport type PlannerAssistantActionInput = z.input<\n  typeof plannerAssistantRequestSchema\n>\n\nexport type PlannerAssistantActionSuccess = {\n  ok: true\n  plan: z.infer<typeof plannerAssistantPlanValidator>\n  safeMode: PlannerAssistantSafeModeState\n}\n\nexport type PlannerAssistantActionError = {\n  ok: false\n  error: string\n  message: string\n  safeMode: PlannerAssistantSafeModeState\n  issues?: unknown\n}\n\nexport type PlannerAssistantActionResult =\n  | PlannerAssistantActionSuccess\n  | PlannerAssistantActionError\n\nfunction formatValidationIssues(\n  issues: z.ZodIssue[],\n): Array<{ path: z.ZodIssue['path']; message: string }> {\n  return issues.map((issue) => ({\n    path: issue.path,\n    message: issue.message,\n  }))\n}\n\nexport async function planWithAssistantAction(\n  input: PlannerAssistantActionInput,\n): Promise<PlannerAssistantActionResult> {\n  const safeMode = resolvePlannerAssistantSafeMode()\n\n  if (safeMode.server !== safeMode.client) {\n    return {\n      ok: false,\n      error: 'safe_mode_mismatch',\n      message:\n        'Planner assistant is disabled because SAFE_MODE and NEXT_PUBLIC_SAFE_MODE do not match.',\n      safeMode,\n    } satisfies PlannerAssistantActionError\n  }\n\n  const parsed = plannerAssistantRequestSchema.safeParse(input)\n  if (!parsed.success) {\n    return {\n      ok: false,\n      error: 'invalid_request',\n      message: 'Invalid planner assistant request.',\n      safeMode,\n      issues: formatValidationIssues(parsed.error.issues),\n    } satisfies PlannerAssistantActionError\n  }\n\n  try {\n    const { prompt, focusDate, suggestionLimit } = parsed.data\n    const now = focusDate ? fromISODate(focusDate) ?? undefined : undefined\n    const plan = planWithAssistant({\n      prompt,\n      now,\n      suggestionLimit,\n    })\n\n    return {\n      ok: true,\n      plan,\n      safeMode,\n    } satisfies PlannerAssistantActionSuccess\n  } catch (error) {\n    if (error instanceof PlannerAssistantError) {\n      if (error.code === 'empty_prompt') {\n        return {\n          ok: false,\n          error: error.code,\n          message: 'Describe your plan before asking the assistant.',\n          safeMode,\n        } satisfies PlannerAssistantActionError\n      }\n\n      if (error.code === 'budget_exhausted') {\n        return {\n          ok: false,\n          error: error.code,\n          message: 'Planner assistant prompt exceeded the token budget.',\n          safeMode,\n        } satisfies PlannerAssistantActionError\n      }\n\n      return {\n        ok: false,\n        error: error.code,\n        message: 'Planner assistant produced an invalid response.',\n        safeMode,\n      } satisfies PlannerAssistantActionError\n    }\n\n    return {\n      ok: false,\n      error: 'internal_error',\n      message:\n        error instanceof Error ? error.message : 'Planner assistant failed.',\n      safeMode,\n    } satisfies PlannerAssistantActionError\n  }\n}\n"],"names":["usageStore","Map","aggregateTokens","normalizeText","value","undefined","trimmed","trim","length","recordLlmTokenUsage","metadata","tokens","existing","id","previousTokens","normalizedMetadata","normalizeMetadata","normalizedId","normalizedLabel","label","normalizedKind","kind","normalizedTokens","normalizeTokenCount","Number","isFinite","rounded","Math","round","get","delete","mergedMetadata","incoming","mergeMetadata","set","cachedSegmenter","CONTROL_CHAR_PATTERN","INVISIBLE_CHAR_PATTERN","COLLAPSE_SPACES_PATTERN","SAFE_MODE_RESPONSE_RESERVE","resolveNumericEnv","min","integer","SAFE_MODE_TEMPERATURE_CEILING","SAFE_MODE_MAX_TOOL_CALLS","warnedMessages","Set","normalizeIssuePath","path","normalized","segment","push","description","toString","normalizeIssueMessage","issue","code","z","invalid_type","message","test","warnOnce","key","console","has","add","warn","reportTokenEstimateIssue","index","raw","reason","printable","JSON","stringify","formatIssuePath","reduce","acc","getUnicodeSegments","input","intlApi","Intl","segmenterCtor","Segmenter","granularity","segmenter","Array","from","ENABLED_FLAG_VALUES","reportNumericEnvIssue","name","names","fallback","options","process","candidates","isArray","env","parsed","trunc","isNaN","getDefaultMaxInputLength","FALLBACK_MAX_INPUT_LENGTH","defaultTokenEstimator","content","tokensPerCharacter","getDefaultTokensPerCharacter","FALLBACK_TOKENS_PER_CHARACTER","EPSILON","characterCount","unicodeLength","ceil","enforceTokenBudgetInternal","messages","estimator","estimateTokens","incomingReserved","reservedForResponse","reserved","max","floor","clientSafeMode","isSafeModeEnabled","serverSafeMode","isServerSafeModeExplicitlyEnabled","SAFE_MODE","toLowerCase","safeMode","safeReserved","incomingMaxTokens","maxTokens","availableTokens","safeMaxTokens","getSafeModeTokenCeiling","SAFE_MODE_TOKEN_CEILING_FALLBACK","kept","used","removed","estimate","isInteger","pinned","reverse","result","removedCount","totalTokens","agent","MIN_TOP_P","SYSTEM_PROMPT","AGENT_METADATA","plannerAssistantSuggestionSchema","title","intent","confidence","summary","nullable","schedule","date","optional","time","plannerAssistantPlanSchema","sanitizedPrompt","prompt","suggestions","safety","temperature","toolChoice","mode","maxToolCalls","int","nonnegative","topP","tokenBudget","PlannerAssistantError","Error","toSuggestionId","replace","DISABLED_FLAG_VALUES","normalizeFlag","resolveFlag","primary","secondary","SAFE_MODE_FALLBACK","plannerAssistantRequestSchema","focusDate","suggestionLimit","positive","planWithAssistantAction","resolvePlannerAssistantSafeMode","server","NEXT_PUBLIC_SAFE_MODE","client","active","ok","error","safeParse","success","issues","formatValidationIssues","map","fromISODate","data","now","plan","planWithAssistant","sanitizePrompt","maxLength","allowMarkup","resolvedMaxLength","split","line","trimEnd","join","truncated","unicodeTruncate","segments","slice","sanitizeText","applyModelSafety","toolChoiceConfig","config","normalizeTemperature","DEFAULT_TEMPERATURE","clamped","MIN_TEMPERATURE","MAX_TEMPERATURE","MAX_TOP_P","normalizeToolChoice","normalizedMode","normalizedMax","normalizeMaxToolCalls","safeTemperature","safeToolMax","safeModeEnabled","isSafeModeFlagEnabled","budget","enforceTokenBudget","restOptions","role","DEFAULT_MAX_TOKENS","finalPrompt","extractUserPrompt","DEFAULT_RESPONSE_RESERVE","userMessage","find","splitSegments","candidateLines","filter","Date","requestedLimit","limit","SAFE_MODE_SUGGESTION_LIMIT","deduplicateSuggestions","DEFAULT_SUGGESTION_LIMIT","seen","rawSuggestions","suggestion","synthesiseSuggestion","parsePlannerPhrase","text","event","summariseParse","toSchedule","startDate","validation","guardResponse","schema","parse","reportSchemaValidationFailure","String","pathText","cause"],"sourceRoot":"","ignoreList":[]}
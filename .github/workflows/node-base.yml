name: Node Base Workflow

on:
  workflow_call:
    inputs:
      run:
        description: Command to execute after dependencies install
        required: true
        type: string
      cache-path:
        description: Optional path to cache between runs (newline-delimited for multiple entries)
        required: false
        default: ""
        type: string
      artifact-name:
        description: Optional artifact name to upload after the run
        required: false
        default: ""
        type: string
      artifact-path:
        description: Optional path (newline-delimited) to upload as an artifact after the run
        required: false
        default: ""
        type: string
      summary-title:
        description: Optional title for the job summary section
        required: false
        default: ""
        type: string
      install-playwright:
        description: Install Playwright browsers and seed a cache for them
        required: false
        default: false
        type: boolean
      artifact-on-failure:
        description: Only upload the artifact when a previous step failed
        required: false
        default: false
        type: boolean
    secrets: {}

jobs:
  node-base:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Activate package manager via Corepack
        run: |
          corepack enable
          corepack prepare "$(node -p "require('./package.json').packageManager")" --activate

      - name: Restore project cache
        if: inputs.cache-path != ''
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ inputs.cache-path }}
          key: shared-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            shared-${{ runner.os }}-

      - name: Determine Playwright version
        if: inputs.install-playwright
        id: playwright
        run: |
          set -euo pipefail
          VERSION=$(node <<'NODE'
          const lock = require('./package-lock.json');
          const packages = lock.packages ?? {};
          const candidates = [
            'node_modules/@playwright/test',
            'node_modules/playwright',
            'node_modules/playwright-core',
          ];
          for (const key of candidates) {
            const entry = packages[key];
            if (entry && entry.version) {
              process.stdout.write(entry.version);
              process.exit(0);
            }
          }
          throw new Error('Playwright dependency not found in package-lock.json');
          NODE
          )
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Restore Playwright cache
        if: inputs.install-playwright
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright.outputs.version }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Install Playwright browsers
        if: inputs.install-playwright
        run: npx playwright install --with-deps

      - name: Run command
        run: ${{ inputs.run }}

      - name: Upload artifact
        if: |
          inputs.artifact-name != '' &&
          inputs.artifact-path != '' &&
          (
            !inputs.artifact-on-failure ||
            failure()
          )
        uses: actions/upload-artifact@b4b15b8c7f4b6d1b79c82b9e19016f539166271c
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}
          if-no-files-found: error

      - name: Summarize results
        if: always()
        run: |
          TITLE="${{ inputs.summary-title }}"
          if [ -z "$TITLE" ]; then
            TITLE="${{ github.job }}"
          fi
          {
            echo "## $TITLE";
            echo "- Status: ${{ job.status }}";
          } >> "$GITHUB_STEP_SUMMARY"

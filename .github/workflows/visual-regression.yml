name: Visual Regression

concurrency:
  group: visual-regression-${{ inputs.branch || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Git ref to check out before running the suite
        required: false
        default: main
        type: string
      environment:
        description: Optional environment name to annotate the run
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    name: Build application
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.2.1
        with:
          fetch-depth: 2
          ref: ${{ inputs.branch != '' && inputs.branch || github.ref }}

      - uses: ./.github/actions/setup-node-project

      - name: Build Next.js application
        shell: bash
        run: |
          set -euo pipefail
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v4.4.3
        with:
          name: next-build
          path: .next
          if-no-files-found: error

  visual:
    name: Visual Regression (${{ matrix.project }})
    needs: build
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        project:
          - chromium
          - firefox
          - webkit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.2.1
        with:
          fetch-depth: 2
          ref: ${{ inputs.branch != '' && inputs.branch || github.ref }}

      - uses: ./.github/actions/setup-node-project

      - name: Download build artifact
        uses: actions/download-artifact@f0444e9ed1bc69c8f27d0fc1b60d26e867f49fc1 # v4.1.7
        with:
          name: next-build
          path: next-build

      - name: Activate build artifact
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "next-build/.next" ]; then
            rm -rf .next
            mv next-build/.next .next
            rm -rf next-build
          fi

      - name: Determine Playwright version
        id: playwright-version
        run: echo "value=$(node -p \"require('@playwright/test/package.json').version\")" >>"$GITHUB_OUTPUT"

      - name: Restore Playwright cache
        id: playwright-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: visual-playwright-${{ steps.playwright-version.outputs.value }}-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: ${{ steps.playwright-cache.outputs.cache-hit != 'true' }}
        run: npx playwright install --with-deps

      - name: Run visual regression tests
        shell: bash
        env:
          PROJECT: ${{ matrix.project }}
          WORKFLOW_ENVIRONMENT: ${{ inputs.environment }}
        run: |
          set -euo pipefail

          PORT=3200
          npm run start -- --hostname 127.0.0.1 --port "$PORT" &
          SERVER_PID=$!

          cleanup() {
            if kill -0 "$SERVER_PID" 2>/dev/null; then
              kill "$SERVER_PID"
              wait "$SERVER_PID" || true
            fi
          }

          trap cleanup EXIT

          for attempt in $(seq 1 30); do
            if curl --fail --silent --head "http://127.0.0.1:${PORT}" >/dev/null; then
              READY=1
              break
            fi
            sleep 2
          done

          if [ -z "${READY:-}" ]; then
            echo "Server failed to start" >&2
            exit 1
          fi

          if [ -n "${WORKFLOW_ENVIRONMENT:-}" ]; then
            echo "Environment label: ${WORKFLOW_ENVIRONMENT}"
          fi

          OUTPUT_DIR="playwright-results/visual/${PROJECT}"
          mkdir -p "$OUTPUT_DIR"

          LIST_OUTPUT=$(npx playwright test --list --project="$PROJECT" --grep "@visual") || true

          if ! echo "$LIST_OUTPUT" | grep -q "@visual"; then
            echo "No @visual-tagged tests detected; skipping Playwright execution." >&2
            exit 0
          fi

          npx playwright test \
            --project="$PROJECT" \
            --reporter=line \
            --trace=retain-on-failure \
            --output="$OUTPUT_DIR" \
            --grep "@visual"

      - name: Save Playwright cache
        if: ${{ steps.playwright-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/ms-playwright
          key: visual-playwright-${{ steps.playwright-version.outputs.value }}-${{ hashFiles('package-lock.json') }}

      - name: Upload visual artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v4.4.3
        with:
          name: visual-diff-${{ matrix.project }}
          path: playwright-results/visual/${{ matrix.project }}
          if-no-files-found: warn

import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const featureDirs = [
  path.resolve(__dirname, "../src/components/planner"),
  path.resolve(__dirname, "../src/components/prompts"),
];

async function getFiles(dir: string): Promise<string[]> {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const files: string[] = [];
  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      files.push(...(await getFiles(full)));
    } else if (
      entry.isFile() &&
      /\.tsx?$/.test(entry.name) &&
      entry.name !== "index.ts" &&
      entry.name !== "index.tsx"
    ) {
      files.push(full);
    }
  }
  return files;
}

function toExportName(file: string): string {
  const base = path.basename(file).replace(/\.(tsx|ts)$/, "");
  return base
    .replace(/[-_](.)/g, (_, c) => c.toUpperCase())
    .replace(/^(.)/, (c) => c.toUpperCase());
}

type ExportInfo = { name?: string; lines: string[] };

async function buildExport(file: string, baseDir: string): Promise<ExportInfo> {
  const rel =
    "./" +
    path
      .relative(baseDir, file)
      .replace(/\\/g, "/")
      .replace(/\.(tsx|ts)$/, "");
  const content = await fs.readFile(file, "utf8");
  const hasDefault = /export\s+default/.test(content);
  const hasNamed =
    /export\s+(?:const|function|class|type|interface|enum|\{)/.test(content);
  const lines: string[] = [];
  let name: string | undefined;
  if (hasDefault) {
    name = toExportName(file);
    lines.push(`export { default as ${name} } from "${rel}";`);
  }
  if (hasNamed) {
    lines.push(`export * from "${rel}";`);
  }
  return { name, lines };
}

async function generate(dir: string) {
  const files = await getFiles(dir);
  const indexFile = path.join(dir, "index.ts");
  const exports = [
    "// Auto-generated by scripts/generate-feature-index.ts",
    "// Do not edit directly.",
  ];
  const used = new Set<string>();
  for (const file of files.sort()) {
    const info = await buildExport(file, dir);
    if (info.name && used.has(info.name)) {
      continue;
    }
    if (info.name) {
      used.add(info.name);
    }
    exports.push(...info.lines);
  }
  exports.push("");
  await fs.writeFile(indexFile, exports.join("\n"));
  console.log(`Generated ${path.relative(process.cwd(), indexFile)}`);
}

async function main() {
  await Promise.all(featureDirs.map(generate));
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
